---
title: "Hands-on_Ex03 - part 1"
description: "Programming Interactive Data Visualisation with R"
author: "Tai Qiu Yan"
date: "April 30, 2024"
date-modified: "last-modified"
format: html
editor: visual
execite:
  eval: ture
  echo: true
  warning: false
---

# 1 **Learning Outcome**

This hands-on exercise shows how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

# 2 Getting Started

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse)
```

# 3 Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

```{r}
spec(exam_data)
```

# 4 **Interactive Data Visualisation - ggiraph methods**

ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with ggplot geometries that can understand three arguments:

-   Tooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   Onclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

-   Data_id: a column of data-sets that contain an id to be associated with elements.

## **Tooltip effect with *tooltip* aesthetic** {style="color: deepskyblue;"}

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.

:::: panel-tabset
## Improved plot

```{r}
#| echo: false
p <- ggplot(data = exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    binwidth = 1,         
    stackgroups = TRUE,
    dotsize = 0.8,          # Make dots bigger
    color = "darkblue",     # Dot border color
    fill = "skyblue",       # Dot fill color
    method = "histodot",
    binaxis = "x"           # Stack along x-axis
  ) +
  scale_y_continuous(NULL, breaks = NULL) +  # Hide y-axis
  labs(
    title = "Distribution of Maths Scores",
    x = "Maths Score",
    y = NULL
  ) +
  theme_minimal() +          # Cleaner background
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(size = 12),
    axis.title.x = element_text(size = 14)
  )

girafe(
  ggobj = p,
  width_svg = 8,            # Slightly bigger
  height_svg = 8 * 0.618    
)
```

## The code

::: {style="font-size: 0.8em"}
```{r}
#| eval: false
p <- ggplot(data = exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    binwidth = 1,
    stackgroups = TRUE,
    dotsize = 0.8,          # Make dots bigger
    color = "darkblue",     # Dot border color
    fill = "skyblue",       # Dot fill color
    method = "histodot",
    binaxis = "x"           # Stack along x-axis
  ) +
  scale_y_continuous(NULL, breaks = NULL) +  # Hide y-axis
  labs(
    title = "Distribution of Maths Scores",
    x = "Maths Score",
    y = NULL
  ) +
  theme_minimal() +          # Cleaner background
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(size = 12),
    axis.title.x = element_text(size = 14)
  )

girafe(
  ggobj = p,
  width_svg = 8,            # Slightly bigger
  height_svg = 8 * 0.618    # Keep golden ratio
)
```
:::
::::

# 5 **Displaying multiple information on tooltip**

The content of the tooltip can be customised by including a list object as shown in the code chunk below.

```{r}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.

# 6 **Interactivity**

## 6.1 **Customising Tooltip style**

Code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add **css** declarations.

```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)   
```

Notice that the background colour of the tooltip is black and the font colour is white and bold.

## 6.2 **Displaying statistics on tooltip**

Code chunk below shows an advanced way to customise tooltip. In this example, a **function** is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

## 6.3 **Hover effect with data_id aesthetic**

Code chunk below shows the second interactive feature of ggiraph, namely **data_id**.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)  
```

Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.

Note that the default value of the hover css is hover_css = “fill:orange;”.

## 6.4 **Styling hover effect**

In the code chunk below, **css** codes are used to **change the highlighting effect**.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)   
```

Note: Different from previous example, in this example the ccs customisation request are encoded directly.

## 6.5 **Combining tooltip and hover effect**

There are time that we want to **combine tooltip and hover effect** on the interactive statistical graph as shown in the code chunk below.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, 
        data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
) 
```

Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.

## 6.6 **Click effect with onclick**

**onclick** argument of ggiraph provides **hotlink interactivity** on the web.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618) 
```

Web document link with a data object will be displayed on the web browser upon mouse click.

## 6.7 **Coordinated Multiple Views with ggiraph**

**Coordinated multiple views** methods has been implemented in the data visualisation below.

When a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.

The following programming strategy will be used:

1.  Appropriate interactive functions of **ggiraph** will be used to create the multiple views.

2.  **patchwork** function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.

```{r}
p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

The *data_id* aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.

# 7 **Interactive Data Visualisation - plotly methods!**

There are two ways to create interactive graph by using plotly, they are: by using **plot_ly()**, and by using **ggplotly()**.

## 7.1 **Creating an interactive scatter plot: plot_ly() method**

The tabset below shows an example a basic interactive plot created by using **plot_ly()**.

```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

## 7.2 **Working with visual variable: plot_ly() method**

In the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).

Click on the colour symbol at the legend.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

## 7.3 **Creating an interactive scatter plot: ggplotly() method**

The code chunk below plots an interactive scatter plot by using ggplotly().

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

Notice that the only extra line you need to include in the code chunk is *ggplotly()*.

## 7.4 **Coordinated Multiple Views with plotly**

The creation of a coordinated linked plot by using **plotly** involves three steps:

-   **highlight_key()** of plotly package is used as shared data.

-   two scatterplots will be created by using ggplot2 functions.

-   lastly, **subplot()** of plotly package is used to place them next to each other side-by-side.

-   highlight_key() simply creates an object of class crosstalk::SharedData.

```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

# 8 **Interactive Data Visualisation - crosstalk methods!**

**Crosstalk** is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

## 8.1 **Interactive Data Table: DT package**

-   A wrapper of the JavaScript Library **DataTables**

-   Data objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).

```{r}
DT::datatable(exam_data, class= "compact")
```

## 8.2 **Linked brushing: crosstalk method**

Code chunk below is used to implement the coordinated brushing shown above.

```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)  
```
