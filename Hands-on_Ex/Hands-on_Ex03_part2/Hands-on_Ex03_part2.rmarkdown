---
title: "Hands-on_Ex03 - part 2"
description: "Programming Animated Statistical Graphics with R"
author: "Tai Qiu Yan"
date: "May 1, 2024"
date-modified: "last-modified"
format: html
editor: visual
execite:
  eval: ture
  echo: true
  warning: false
---



# 1 Overview

This hands-on exercise shows how to create animated data visualisation by using **gganimate** and **plotly r** packages. At the same time, this exercise demostrates how to (i) reshape data by using **tidyr** package, and (ii) process, wrangle and transform data by using **dplyr** package.

## 1.1 **Basic concepts of animation**

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.

![](images/clipboard-3938738489.png)

## 1.2 Terminology

Key concepts and terminology related to this type of visualization:

1.  **Frame**: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.

2.  **Animation Attributes**: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

Before creating animated graphs, it is important to consider whether the effort is justified. While animation may not significantly enhance exploratory data analysis, it can be highly effective in presentations by helping the audience engage with the topic more deeply compared to static visuals

# 2 Getting Started

## 2.1 Loading the R packages

The code chunk below checks, installs and loads the following R packages:

-   **plotly**, R library for plotting interactive statistical graphs.

-   **gganimate**, an ggplot extension for creating animated statistical graphs.

-   **gifski** converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

-   **gapminder**: An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.

-   **tidyverse**, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.



```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```



### 2.2 Importing the data

The code chunk below imports Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.

-   **read_xls()** of *readxl* package is used to import the Excel worksheet.

-   **mutate_each\_()** of *dplyr* package is used to convert all character data type into factor.

-   **mutate** of *dplyr* package is used to convert data values of Year field into integer.



```{r, warning=FALSE}
col <- c("Country", "Continent")
globalPop <- read_xls("GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```



Unfortunately, mutate_each\_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.



```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```



Instead of using mutate_at(), across() can be used to derive the same outputs.



```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(all_of(col), as.factor)) %>%
  mutate(Year = as.integer(Year))
```



## 3 Animated Data Visualisation: gganimate methods

**gganimate** extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   **transition\_\*()** defines how the data should be spread out and how it relates to itself across time.

-   **view\_\*()** defines how the positional scales should change along the animation.

-   **shadow\_\*()** defines how data from other points in time should be presented in the given point in time.

-   **enter\_\*()/exit\_\*()** defines how new data should appear and how old data should disappear during the course of the animation.

-   **ease_aes()** defines how different aesthetics should be eased during transitions.

## 3.1 Building a static population bubble plot

In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.



```{r}
ggplot(globalPop, aes(x = Old, y = Young,
                      size = Population,
                      colour = Country)) +
  geom_point(alpha = 0.7,
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2,12)) +
  labs(title = 'Year: {frame_time}',
       x = '% Aged',
       y = '% Young')
```



## 3.2 Building the animated bubble plot

In the code chunk below,

-   **transition_time()** of **gganimate** is used to create transition through distinct states in time (i.e. Year).

-   **ease_aes()** is used to control easing of aesthetics. The default is **linear**. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.



```{r}
ggplot(globalPop, aes(x = Old, y = Young,
                      size = Population,
                      colour = Country)) +
  geom_point(alpha = 0.7,
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2,12)) +
  labs(title = 'Year: {frame_time}',
       x = '% Aged',
       y = '% Young') +
  transition_time(Year) +
  ease_aes('linear')
```



# 4 Animated Data Visualisation: plotly

In **Plotly R** package, both **ggplotly()** and **plot_ly()** support key frame animations through the **frame** argument/aesthetic. They also support an **ids** argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

## 4.1 **Building an animated bubble plot: ggplotly() method**

In this sub-section, an animated bubble plot is created by using **ggplotly()** method.

-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called *gg*.

-   ggplotly() is then used to convert the R graphic object into an animated svg object.



```{r, warning=FALSE}
gg <- ggplot(globalPop,
             aes(x = Old,
                 y = Young,
                 size = Population,
                 colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7,
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2,12)) +
  labs(x = '% Aged',
       y = '% Young')

ggplotly(gg)
```



Notice that although **show.legend = FALSE** argument was used, the legend still appears on the plot. To overcome this problem, **theme(legend.position='none')** should be used as shown in the plot and code chunk below.



```{r, warning=FALSE}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```



## 4.2 Building an animated bubble plot: plot_ly() method

In this sub-section, an animated bubble plot is created by using **plot_ly()** method.



```{r, warning=FALSE}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```

