---
title: "Hands-on_Ex03"
description: "Programming Interactive Data Visualisation with R"
author: "Tai Qiu Yan"
date: "April 29, 2024"
date-modified: "last-modified"
format: html
editor: visual
execite:
  eval: ture
  echo: true
  warning: false
---

# 1 **Learning Outcome** {style="color: deepskyblue;"}

In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

# 2 Getting Started {style="color: deepskyblue;"}

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse)
```

# 3 Importing the data {style="color: deepskyblue;"}

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# 4 **Interactive Data Visualisation - ggiraph methods** {style="color: deepskyblue;"}

ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with ggplot geometries that can understand three arguments:

-   Tooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   Onclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

-   Data_id: a column of data-sets that contain an id to be associated with elements.

## **Tooltip effect with *tooltip* aesthetic** {style="color: deepskyblue;"}

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.

:::: panel-tabset
## Improved plot

```{r}
#| echo: false
p <- ggplot(data = exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    binwidth = 1,         
    stackgroups = TRUE,
    dotsize = 0.8,          # Make dots bigger
    color = "darkblue",     # Dot border color
    fill = "skyblue",       # Dot fill color
    method = "histodot",
    binaxis = "x"           # Stack along x-axis
  ) +
  scale_y_continuous(NULL, breaks = NULL) +  # Hide y-axis
  labs(
    title = "Distribution of Maths Scores",
    x = "Maths Score",
    y = NULL
  ) +
  theme_minimal() +          # Cleaner background
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(size = 12),
    axis.title.x = element_text(size = 14)
  )

girafe(
  ggobj = p,
  width_svg = 8,            # Slightly bigger
  height_svg = 8 * 0.618    
)
```

## The code

::: {style="font-size: 0.8em"}
```{r}
#| eval: false
p <- ggplot(data = exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    binwidth = 1,
    stackgroups = TRUE,
    dotsize = 0.8,          # Make dots bigger
    color = "darkblue",     # Dot border color
    fill = "skyblue",       # Dot fill color
    method = "histodot",
    binaxis = "x"           # Stack along x-axis
  ) +
  scale_y_continuous(NULL, breaks = NULL) +  # Hide y-axis
  labs(
    title = "Distribution of Maths Scores",
    x = "Maths Score",
    y = NULL
  ) +
  theme_minimal() +          # Cleaner background
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(size = 12),
    axis.title.x = element_text(size = 14)
  )

girafe(
  ggobj = p,
  width_svg = 8,            # Slightly bigger
  height_svg = 8 * 0.618    # Keep golden ratio
)
```
:::
::::

# 5 **Displaying multiple information on tooltip** {style="color: deepskyblue;"}

The content of the tooltip can be customised by including a list object as shown in the code chunk below.

```{r}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.

# 6 **Interactivity** {style="color: deepskyblue;"}

## 6.1 **Customising Tooltip style** {style="color: deepskyblue;"}

Code chunk below uses `opts_tooltip()` of **ggiraph** to customize tooltip rendering by add css declarations.

```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)   
```

Notice that the background colour of the tooltip is black and the font colour is white and bold.

## 6.2 **Displaying statistics on tooltip** {style="color: deepskyblue;"}

Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

## 6.3 **Hover effect with data_id aesthetic** {style="color: deepskyblue;"}
