[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "◔.̮◔✧ Hi, I am Qiu Yan. Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course. Thank you for visiting ~"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 2",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\nFive R packages will be used. They are tidyverse, jsonlite, tidygraph, ggraph and SmartEDA.\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environemnt.\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph,\n               SmartEDA)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#importing-knowledge-graph-data",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#importing-knowledge-graph-data",
    "title": "Take Home Exercise 2",
    "section": "2.2 Importing Knowledge Graph Data",
    "text": "2.2 Importing Knowledge Graph Data\nIn the code chunk below, fromJSON() of jsonlite package is used to import mc3.json file into R and save the output object.\n\nMC3 &lt;- fromJSON(\"data/MC3_graph.json\")\nMC3_schema &lt;- fromJSON(\"data/MC3_schema.json\")\n\n\nInspecting knowledge graph structure\nIn the code chunk below glimpse() is used to reveal the structure of mc3 knowledge graph.\n\nglimpse(MC3)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ..."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#extracting-the-edges-and-nodes-tables",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#extracting-the-edges-and-nodes-tables",
    "title": "Take Home Exercise 2",
    "section": "3 Extracting the edges and nodes tables",
    "text": "3 Extracting the edges and nodes tables\nas_tibble() of tibble package package is used to extract the nodes and links tibble data frames from mc3 tibble dataframe into two separate tibble dataframes called mc3_nodes and mc3_edges respectively.\n\nmc3_nodes &lt;- as_tibble(MC3$nodes)\nmc3_edges &lt;- as_tibble(MC3$edges)\n\n\nInitial EDA\nIn the code chunk below, ExpCatViz() of SmartEDA package is used to reveal the frequency distribution of all categorical fields in mc3_nodes tibble dataframe.\n\nExpCatViz(data=mc3_nodes,\n          col=\"lightblue\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n\n\n\nThe code chunk below uses ExpCATViz() of SmartEDA package to reveal the frequency distribution of all categorical fields in mc3_edges tibble dataframe.\n\nExpCatViz(data=mc3_edges,\n          col=\"lightblue\")\n\n[[1]]"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#data-cleaning-and-wrangling",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#data-cleaning-and-wrangling",
    "title": "Take Home Exercise 2",
    "section": "4 Data Cleaning and Wrangling",
    "text": "4 Data Cleaning and Wrangling\n\n4.1 Cleaning and wrangling nodes\nCode chunk below performs the following data cleaning tasks:\n\nconvert values in id field into character data type,\nexclude records with id value are na,\nexclude records with similar id values,\nexclude thing_collected field, and\nsave the cleaned tibble dataframe into a new tibble datatable called mc3_nodes_cleaned.\n\n\nmc3_nodes_cleaned &lt;- mc3_nodes %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected)\n\n\n\n4.2 Cleaning and wrangling edges\nThe code chunk below will be used to:\n\nrename source and target fields to from_id and to_id respectively,\nconvert values in from_id and to_id fields to character data type,\nexclude values in from_id and to_id which not found in the id field of mc3_nodes_cleaned,\nexclude records whereby from_id and/or to_id values are missing, and\nsave the cleaned tibble dataframe and called it mc3_edges_cleaned.\n\n\nmc3_edges_cleaned &lt;- mc3_edges %&gt;%\n  rename(from_id = source, \n         to_id = target) %&gt;%\n  mutate(across(c(from_id, to_id), \n                as.character)) %&gt;%\n  filter(from_id %in% mc3_nodes_cleaned$id, \n         to_id %in% mc3_nodes_cleaned$id) %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\nThe code chunk below will be used to create mapping of character id in mc3_nodes_cleaned to row index\n\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\nThe code chunk below will be used to join and convert from_id and to_id to integer indices. At the same time we also drop rows with unmatched nodes.\n\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, \n            by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, \n            by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  select(from, to, is_inferred, type) %&gt;%\n  filter(!is.na(from) & !is.na(to))  \n\nThe code chunk below is used to subset nodes to only those referenced by edges.\n\nused_node_indices &lt;- sort(\n  unique(c(mc3_edges_indexed$from, \n           mc3_edges_indexed$to)))\n\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\nThe code chunk below will be used to rebuild lookup from old index to new index.\n\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(\n    used_node_indices))\n\nThe code chunk below will be used to update edge indices to match new node table.\n\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, \n            by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, \n            by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  select(from = from_new, to = to_new, \n         is_inferred, type)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#building-the-tidygraph-object",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#building-the-tidygraph-object",
    "title": "Take Home Exercise 2",
    "section": "5 Building the tidygraph object",
    "text": "5 Building the tidygraph object\nThe code chunk below will be used to build the tidygraph object.\n\nmc3_graph &lt;- tbl_graph(\n  nodes = mc3_nodes_final,\n  edges = mc3_edges_final,\n  directed = TRUE\n)\n\nExamine the object by using str() after the tidygraph object is created.\n\nstr(mc3_graph)\n\nClasses 'tbl_graph', 'igraph'  hidden list of 10\n $ : num 1159\n $ : logi TRUE\n $ : num [1:3226] 0 0 0 0 0 0 0 1 1 1 ...\n $ : num [1:3226] 1137 356 746 894 875 ...\n $ : NULL\n $ : NULL\n $ : NULL\n $ : NULL\n $ :List of 4\n  ..$ : num [1:3] 1 0 1\n  ..$ : Named list()\n  ..$ :List of 31\n  .. ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  .. ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  .. ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  .. ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ findings         : chr [1:1159] NA NA NA NA ...\n  .. ..$ content          : chr [1:1159] NA NA NA NA ...\n  .. ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ results          : chr [1:1159] NA NA NA NA ...\n  .. ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ destination      : chr [1:1159] NA NA NA NA ...\n  .. ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  .. ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  .. ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..$ reference        : chr [1:1159] NA NA NA NA ...\n  .. ..$ date             : chr [1:1159] NA NA NA NA ...\n  .. ..$ time             : chr [1:1159] NA NA NA NA ...\n  .. ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  .. ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  .. ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  .. ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  .. ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  .. ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ operational_role : chr [1:1159] NA NA NA NA ...\n  .. ..$ new_index        : int [1:1159] 1 2 3 4 5 6 7 8 9 10 ...\n  ..$ :List of 2\n  .. ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  .. ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n $ :&lt;environment: 0x000002706f90d708&gt; \n - attr(*, \"active\")= chr \"nodes\""
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#visualising-the-knowledge-graph",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#visualising-the-knowledge-graph",
    "title": "Take Home Exercise 2",
    "section": "5 Visualising the knowledge graph",
    "text": "5 Visualising the knowledge graph\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)\n\nIn the code chunk below, ggraph functions are used to create the whole graph.\n\nggraph(mc3_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`), \n                  size = 4) +\n  geom_node_text(aes(label = type), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "This exercise delivers three static analytical visualisations and concise commentaries that explain the demographic structure and geographic distribution of Singapore residents in June 2024. Using the “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex” dataset from the Department of Statistics, the data were wrangled entirely with the tidyverse and visualised with ggplot2 and its extensions, adhering to the exercise requirement for reproducible R code and non‑interactive graphics.\n\nNation‑wide age profile – a population pyramid and companion bar chart depict gender balance, cohort sizes, and the dominance of the 26‑65 workforce alongside a contracting youth base and expanding senior segment.\nSpatial distribution – a treemap ranks planning areas by total residents, while six faceted bar charts rank them within each major age group, revealing contrasts such as Tampines’ family orientation versus Bedok’s larger elderly share.\nAge‑structure contrasts – a bubble plot (average age vs population, bubble = senior share) and violin plots of the ten largest areas detail how mean age and intra‑area distributions vary, pinpointing estates like Ang Mo Kio (oldest) and Punggol (youngest).\n\nTogether these visuals provide a foundation for evidence‑based recommendations on schooling capacity, eldercare facilities, housing typology, and transport planning across Singapore’s diverse neighbourhoods."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 1",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\n\nThe codeThe libraries\n\n\n\npacman::p_load(scales, ggrepel, patchwork, \n               ggthemes, hrbrthemes,tidyverse, \n               tidytext,treemapify) \n\n\n\n\n\n\n\n\n\n\nname\npurpose\n\n\n\n\nscales\nNicely formats axis ticks and legends.\n\n\nggrepel\nAdds non‑overlapping text labels to ggplots.\n\n\npatchwork\nCombines multiple ggplots into a single figure.\n\n\nggthemes\nSupplies predefined aesthetic themes.\n\n\nhrbrthemes\nExtends ggthemes with modern, typographically friendly themes and font support.\n\n\ntidyverse\nMeta‑package that loads ggplot2, dplyr, tidyr, readr, stringr, forcats, etc. — the backbone for data import, transformation, and visualisation.\n\n\ntidytext\nTokenises and analyses text.\n\n\ntreemapify\nCreates ggplot‑compatible treemaps."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "title": "Take Home Exercise 1",
    "section": "2.2 Importing dataset",
    "text": "2.2 Importing dataset\n\nThe codeExplaination\n\n\n\npopulation_data &lt;- read_csv(\"respopagesex2024.csv\") %&gt;%\n  mutate(Age = as.numeric(Age))\n\nglimpse(population_data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 1…\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\nThe code imports the dataset respopagesex2024.csv and load the CSV file into a dataframe named population_data.\nAfter import, the mutate() function is applied to convert the Age column from character to numeric format.\nLastly, the glimpse() function provides a concise overview of the dataset’s structure, displaying column names, data types, and sample values."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "title": "Take Home Exercise 1",
    "section": "2.3 Dataset for visuallisation 1",
    "text": "2.3 Dataset for visuallisation 1\n\nThe codeExplaination\n\n\n\npyramid_data &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = cut(\n      Age,\n      breaks = c(seq(0, 100, by = 5), Inf),\n      right = FALSE,\n      labels = c(paste(seq(0, 95, 5), seq(4, 99, 5), sep = \"–\"), \"100+\")\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\n\n\nThe code prepares the dataset population_data for visualising a population pyramid by first converting the Age column to numeric format. It then categorises individual ages into 5-year intervals using the cut() function, creating a new variable AgeGroup with labels such as “0–4”, “5–9”, …, and “100+”. Any rows with missing AgeGroup values are filtered out. The data is then grouped by both AgeGroup and Sex, and the total population (Pop) within each group is calculated using summarise(). Finally, to enable the mirrored bar chart structure of a population pyramid, male population values are converted to negative using mutate() with an ifelse() condition. This transformation allows males to be displayed on the left and females on the right of the central axis in the plot.\n\n\n\n\nThe codeExplaination\n\n\n\npyramid_data_grouped &lt;- population_data %&gt;%\n  mutate(\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    AgeGroup = factor(AgeGroup, levels = c(\"Children\", \"Teenager\", \"Young Adult\", \n                                           \"Adult\", \"Middle-age\", \"Elderly\")),\n    Total_Pop_k = paste0(round(Total_Pop / 1000), \"k\")\n  )\n\n\n\nThe code involves transforming population data into a summarized form suitable for visualizing population distribution by broad age categories and sex. First, the Age variable is classified into six age groups—Children, Teenager, Young Adult, Adult, Middle-age, and Elderly—using logical conditions via the case_when() function. Any records with missing or undefined age groups are removed using filter(). The data is then grouped by both AgeGroup and Sex, and the total population for each group is calculated using summarise(). To ensure a consistent order in plots, the AgeGroup variable is converted to a factor with a specified level sequence. Finally, a new column Total_Pop_k is created to represent the total population in thousands, formatted with a “k” suffix for more concise labeling in visualizations."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "title": "Take Home Exercise 1",
    "section": "2.4 Dataset for visuallisation 2",
    "text": "2.4 Dataset for visuallisation 2\n\nThe codeExplaination\n\n\n\nplanning_area_population &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  mutate(Pop_thousands = Total_Pop / 1000)\n\n\n\nThe code groups the population_data by PA (Planning Area) and then uses summarise() to calculate the total population (Total_Pop) within each area by summing the Pop values. The .groups = \"drop\" argument ensures the resulting data frame is ungrouped for further processing. Next, it filters out any planning areas with a total population of zero to maintain clarity in the visualization. Finally, the code introduces a new variable, Pop_thousands, by dividing the total population by 1,000 to express values in thousands.\n\n\n\n\nThe codeExplaination\n\n\n\npopulation_age_group_top20 &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  group_by(AgeGroup) %&gt;%\n  slice_max(order_by = Total_Pop, n = 20) %&gt;%\n  ungroup()\n\n\n\nThe code prepares a dataset to visualize the top 20 planning areas in Singapore by population across different age groups. It begins by converting the Age variable to a numeric format and classifying individuals into custom age groups such as “Children,” “Teenager,” “Young Adult,” “Adult,” “Middle-age,” and “Elderly” using the case_when() function. Rows with undefined age groups are removed using filter(). The data is then grouped by PA (Planning Area) and AgeGroup, and the total population for each group is calculated using summarise(). After filtering out planning areas with zero population, the code selects the top 20 planning areas per age group based on total population using slice_max(). Finally, ungroup() is applied to prepare the data for plotting."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "title": "Take Home Exercise 1",
    "section": "2.5 Dataset for visuallisation 3",
    "text": "2.5 Dataset for visuallisation 3\n\nThe codeExplaination\n\n\n\nviolin_data &lt;- population_data %&gt;%\n  mutate(Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age), !is.na(PA)) %&gt;%\n  group_by(PA, Age) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  uncount(weights = Pop)\n\ntop10_PAs &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PA)\n\nviolin_filtered &lt;- violin_data %&gt;%\n  filter(PA %in% top10_PAs) %&gt;%\n  mutate(PA = factor(PA, levels = top10_PAs))\n\n\n\nThe code first converts the Age column to numeric and drops any rows where either age or planning‐area (PA) is missing. It then groups by each unique combination of PA and Age and sums the population counts (Pop) to get an aggregated tally for each age cohort within each area. The uncount() step “explodes” these tallies back into individual rows—so each row now represents one person’s age and planning area—producing a long‐form dataset ideal for violin‐plotting. Separately, it identifies the ten most populous planning areas by summing Pop in the original data, sorting descending, and pulling out the top ten area names into top10_PAs. Finally, it filters the expanded violin_data to only those ten areas and redefines PA as a factor ordered according to population rank.\n\n\n\n\nThe codeExplaination\n\n\n\ntop20_PAs &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 20) %&gt;%\n  pull(PA)\n\npa_summary20 &lt;- violin_data %&gt;%\n  filter(PA %in% top20_PAs) %&gt;%\n  mutate(AgeGroup = if_else(Age &gt; 65, \"Elderly\", \"Other\")) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Avg_Age      = mean(Age),\n    Total_Pop    = n(),\n    Elderly_Prop = mean(AgeGroup == \"Elderly\"),\n    .groups      = \"drop\"\n  )\n\n\n\nThe code identifies the twenty planning areas with the largest populations by grouping the original population_data by PA, summing the Pop counts to compute each area’s total population, sorting those totals in descending order, and then taking the first twenty PA values into a vector called top20_PAs. Next, it builds pa_summary20 by filtering the expanded violin_data to only those twenty areas and creating a new categorical variable AgeGroup which labels individuals older than 65 as “Elderly” and everyone else as “Other.” Finally, it groups this subset by PA and computes three key summary statistics for each area: the mean age (Avg_Age), the total number of observations (Total_Pop, effectively the population count in the sample), and the proportion of residents classified as elderly (Elderly_Prop)."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "title": "Take Home Exercise 1",
    "section": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex",
    "text": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Population Pyramid\np1 &lt;- ggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_col(width = 0.9, color = \"white\") +\n  geom_text(aes(label = comma(abs(Pop))),\n            position = position_stack(vjust = 0.5),\n            size = 2.8,\n            color = \"white\") +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population Pyramid of Singapore\",\n    x = \"Age Group (5-year bins)\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, hjust = 0.5),  # center title\n    axis.text = element_text(size = 9),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    legend.position = \"none\"\n  )\n\n# Age group bar chart\np2 &lt;- ggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Total_Pop, fill = Sex)) +\n  geom_col(position = position_dodge(width = 0.9), width = 0.7) +\n  geom_text(aes(label = Total_Pop_k),\n            position = position_dodge(width = 0.9),\n            vjust = -0.3,\n            size = 3) +\n  scale_y_continuous(labels = label_number(scale = 1e-3, suffix = \"k\")) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population by Age Groups\",\n    x = \"Age Group\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text = element_text(size = 10),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),  # center title\n    legend.position = \"none\"\n  ) +\n  annotate(\"rect\", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, alpha = 0) +  # dummy to open up space\n  annotate(\"rect\", xmin = 0.5, xmax = 6.5, ymin = 700000, ymax = 800000, fill = NA) +\n  annotate(\"rect\", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, fill = NA) +\n  annotate(\"rect\", xmin = 2.15, xmax = 2.3, ymin = 430000, ymax = 440000, fill = \"#f768a1\", color = \"black\") +\n  annotate(\"text\", x = 2.45, y = 435000, label = \"Females\", hjust = 0, size = 3.5) +\n  annotate(\"rect\", xmin = 2.15, xmax = 2.3, ymin = 410000, ymax = 420000, fill = \"#3182bd\", color = \"black\") +\n  annotate(\"text\", x = 2.45, y = 415000, label = \"Males\", hjust = 0, size = 3.5)\n\n# Combine and caption\n(p1 | p2) +\n  plot_annotation(\n    caption = \"Age Group Ranges: Children: ≤12 | Teenager: 13–18 | Young Adult: 19–25 | Adult: 26–44 | Middle-age: 45–65 | Elderly: ≥65\",\n    theme = theme(plot.caption = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))\n  )\n\n\n\n\n\nInsight:\nThe population pyramid shows a mature demographic profile, with the largest cohorts in the 35–59 age range, reflecting Singapore’s aging trend. The base of the pyramid, representing children aged 0–14, is narrower, indicating lower birth rates in recent years. The gender distribution is generally balanced across age groups, with no major sex disparity observed.\nThe bar chart reinforces these patterns by grouping the population into broader age categories. The “Middle-age” (45–65) and “Adult” (26–44) segments together form the bulk of the population, representing the current and near-future workforce. Meanwhile, the “Children” and “Teenager” groups are comparatively smaller, signaling future challenges in population replacement. The significant size of the “Elderly” group (65+) emphasizes the rising demand for healthcare, eldercare, and retirement resources.\nThese visuals together highlight the pressing need for strategic planning in workforce sustainability, social infrastructure, and support systems to address Singapore’s shifting age structure."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "title": "Take Home Exercise 1",
    "section": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group",
    "text": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Treemap plot\np1 &lt;- ggplot(planning_area_population, aes(area = Pop_thousands, label = PA, fill = Pop_thousands)) +\n  geom_treemap() +\n  geom_treemap_text(\n    colour = \"black\",\n    place = \"centre\",\n    reflow = TRUE,\n    size = 12\n  ) +\n  scale_fill_viridis_c(option = \"D\", labels = scales::comma_format(suffix = \"k\")) +\n  labs(\n    title = \"Treemap of Total Population by Planning Area (in Thousands)\",\n    fill = \"Population (thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    legend.position = \"bottom\"\n  )\n\n# Bar plot\np2 &lt;- ggplot(population_age_group_top20, aes(x = reorder_within(PA, Total_Pop, AgeGroup), y = Total_Pop, fill = AgeGroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ AgeGroup, scales = \"free\") +\n  scale_x_reordered() +\n  coord_flip() +\n  labs(\n    title = \"Top 20 Planning Areas by Age Group Population\",\n    x = \"Planning Area\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 16),\n    axis.text.y = element_text(size = 10),\n    plot.title = element_text(face = \"bold\", size = 18)\n  )\n\n# combine both plots\np1 / p2 + plot_layout(heights = c(1, 2))\n\n\n\n\n\nInsight:\nThe treemap provides a high-level view of the total population across planning areas, showing that Tampines, Bedok, Sengkang, and Jurong West are the most densely populated regions in Singapore. These areas dominate in population size, occupying larger blocks and warmer color tones.\nThe bar charts below offer a breakdown by age group, revealing nuanced patterns: Tampines and Sengkang consistently rank high across most age groups, especially for adults and children, suggesting a family-oriented residential profile. In contrast, areas like Bedok have a significantly larger elderly population, while Woodlands stands out in the young adult category.\nThe variation across age groups highlights the differing demographic compositions of planning areas, which can inform planning for schools, eldercare, housing, and transportation needs."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---demographic-structure-and-aging-patterns-in-singapores-top-residential-planning-areas",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---demographic-structure-and-aging-patterns-in-singapores-top-residential-planning-areas",
    "title": "Take Home Exercise 1",
    "section": "3.3 Visuallisation 3 - Demographic Structure and Aging Patterns in Singapore’s Top Residential Planning Areas",
    "text": "3.3 Visuallisation 3 - Demographic Structure and Aging Patterns in Singapore’s Top Residential Planning Areas\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# palette for all 20 PAs\narea_colors_all &lt;- colorRampPalette(\n  RColorBrewer::brewer.pal(10, \"Set3\")\n)(20)\nnames(area_colors_all) &lt;- top20_PAs\n\n# Violin plot\np1 &lt;- ggplot(violin_filtered, aes(x = PA, y = Age, fill = PA)) +\n  geom_violin(trim = FALSE, scale = \"area\", width = 0.8, alpha = 0.7) +\n  geom_boxplot(width = 0.1, outlier.shape = NA, color = \"black\") +\n  scale_fill_manual(values = area_colors_all[top10_PAs]) +\n  labs(\n    title = \"Age Distribution by Planning Area (Top 10 Residential Areas)\",\n    x     = \"Planning Area\",\n    y     = \"Age\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    axis.text.x     = element_text(angle = 45, hjust = 1),\n    axis.title      = element_text(size = 16),\n    plot.title      = element_text(face = \"bold\", size = 18)\n  )\n\n# Scatter plot\np2 &lt;- ggplot(pa_summary20, aes(\n      x = Total_Pop,\n      y = Avg_Age,\n      size = Elderly_Prop,\n      fill = PA\n    )) +\n  geom_point(shape = 21, alpha = 0.8, color = \"black\") +\n  geom_text_repel(aes(label = PA), size = 4, max.overlaps = 30) +\n  \n  scale_fill_manual(values = area_colors_all, guide = FALSE) +\n  scale_size_continuous(\n    name  = \"Elderly Proportion\",\n    range = c(6, 20)\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  labs(\n    title = \"Average Age vs. Total Population (Top 20 Planning Areas)\",\n    x     = \"Total Population\",\n    y     = \"Average Age\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"right\",\n    legend.title    = element_text(size = 14),\n    legend.text     = element_text(size = 12),\n    axis.title      = element_text(size = 16),\n    plot.title      = element_text(face = \"bold\", size = 18)\n  )\n\n# combine\n(p2 / p1) + plot_layout(heights = c(1, 0.6))\n\n\n\n\n\nInsight:\nOn the scatterplot, total population per PA ranges from approximately 90,000 in Sembawang to about 275,000 in Bedok and Tampines. Average ages vary between 36 years in Punggol and 46 years in Ang Mo Kio, with intermediate mean ages (≈38–45) in other PAs. Bubble sizes indicate elderly proportion: Ang Mo Kio (~20 %) and Bukit Merah (~18 %) have the largest shares, while Sembawang and Punggol register the smallest (~12 %).\nIn the violin plots for the top ten PAs, median ages are clustered between roughly 35 and 45 years; the interquartile ranges span about 20–30 years. Bedok and Hougang violins have wide upper distributions—indicating substantial populations over 60—while Punggol’s shape is narrowly concentrated between 20 and 40. Medians appear highest in Bukit Batok and Sengkang and lowest in Punggol and Choa Chu Kang."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise we will learn the the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "title": "Hands-on Exercise 6",
    "section": "3.2 Importing the data",
    "text": "3.2 Importing the data\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "title": "Hands-on Exercise 6",
    "section": "3.3 Examining the data structure",
    "text": "3.3 Examining the data structure\nkable() is uesed to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "title": "Hands-on Exercise 6",
    "section": "3.4 Data Preparation",
    "text": "3.4 Data Preparation\n\nStep 1: Deriving weekday and hour of day fields\nBefore plotting the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting.\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 6",
    "section": "3.5 Building the Calendar Heatmaps",
    "text": "3.5 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6",
    "section": "3.6 Building Multiple Calendar Heatmaps",
    "text": "3.6 Building Multiple Calendar Heatmaps\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, we need to:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n\n\nStep 2: Preparing the tidy data frame\nIn this step, we need to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "title": "Hands-on Exercise 6",
    "section": "Step 1: Data Import",
    "text": "Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-on Exercise 6",
    "section": "Step 2: Deriving month and year fields",
    "text": "Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "title": "Hands-on Exercise 6",
    "section": "Step 3: Extracting the target country",
    "text": "Step 3: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "title": "Hands-on Exercise 6",
    "section": "Step 4: Computing year average arrivals by month",
    "text": "Step 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "title": "Hands-on Exercise 6",
    "section": "Step 5: Plotting the cycle plot",
    "text": "Step 5: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "title": "Hands-on Exercise 6",
    "section": "Step 1: Data Import",
    "text": "Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 6",
    "section": "Step 2: Plotting the slopegraph",
    "text": "Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n rice %&gt;% \n   mutate(Year = factor(Year)) %&gt;%\n   filter(Year %in% c(1961, 1980)) %&gt;%\n   newggslopegraph(Year, Yield, Country,\n                 Title = \"Rice Yield of Top 11 Asian Counties\",\n                 SubTitle = \"1961-1980\",\n                 Caption = \"Prepared by: Dr. Kam Tin Seong\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html",
    "title": "Hands-on Exercise 4 part 4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. This hands-on exercise will illustrate:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4 part 4",
    "section": "4.1 FunnelPlotR methods: The basic plot",
    "text": "4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Exercise 4 part 4",
    "section": "4.3 FunnelPlotR methods: Makeover 2",
    "text": "4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative \\n Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n) \n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.1 Computing the basic derived fields",
    "text": "5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.3 Plotting a static funnel plot",
    "text": "5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly()of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html",
    "title": "Hands-on Exercise 4 part 2",
    "section": "",
    "text": "This hands-on exercise will be using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#loading-the-packages",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.1 Loading the packages",
    "text": "3.1 Loading the packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#import-data",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#data-overview",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#data-overview",
    "title": "Hands-on Exercise 4 part 2",
    "section": "Data Overview",
    "text": "Data Overview\n\nsummary()\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\nglimpse()\n\nglimpse(exam)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\nhead()\n\nhead(exam,100)\n\n# A tibble: 100 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 90 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.3 One-sample test: gghistostats() method",
    "text": "3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#unpacking-the-bayes-factor",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.4 Unpacking the Bayes Factor",
    "text": "3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.5 How to interpret Bayes Factor",
    "text": "3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.6 Two-sample mean test: ggbetweenstats()",
    "text": "3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(data = exam,\n               x = GENDER,\n               y = MATHS,\n               type = \"np\", #non-parametric\n               messages = FALSE)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nggbetweenstats(data = exam,\n               x = GENDER,\n               y = MATHS,\n               type = \"r\",\n               messages = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(data = exam,\n               x = MATHS,\n               y = ENGLISH,\n               marginal = FALSE,\n               )\n\n\n\n\n\n\n\n\n\nggscatterstats(data = exam,\n               x = MATHS,\n               y = ENGLISH,\n               marginal = TRUE,\n               )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;%\n  mutate(MATHS_bins =\n           cut(MATHS,\n               breaks = c(0,60,75,85,100)))\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1,\n           x = MATHS_bins,\n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html",
    "title": "Hands-on Exercise 4 part 3",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4 part 3",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-import",
    "title": "Hands-on Exercise 4 part 3",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-overview",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-overview",
    "title": "Hands-on Exercise 4 part 3",
    "section": "Data Overview",
    "text": "Data Overview\n\nsummary()\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\nglimpse()\n\nglimpse(exam)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\nhead()\n\nhead(exam,100)\n\n# A tibble: 100 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 90 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4 part 3",
    "section": "3.1 Plotting standard error bars of point estimates",
    "text": "3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat = “identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4 part 3",
    "section": "3.2 Plotting confidence interval of point estimates",
    "text": "3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars are sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4 part 3",
    "section": "3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4 part 3",
    "section": "4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Exercise 4 part 3",
    "section": "4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n95% confidence interval\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n99% confidence interval\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = 0.99,\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-on Exercise 4 part 3",
    "section": "4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-ungeviz-package",
    "title": "Hands-on Exercise 4 part 3",
    "section": "5.1 Installing ungeviz package",
    "text": "5.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\", force = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#launch-the-application-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#launch-the-application-in-r",
    "title": "Hands-on Exercise 4 part 3",
    "section": "5.2 Launch the application in R",
    "text": "5.2 Launch the application in R\n\nlibrary(ungeviz)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 4 part 3",
    "section": "5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "This hands-on exercise illustrates how to model, analyse, and visualise network data using R.\nBy the end of this hands-on exercise, we will know how to:\n\ncreate graph object data frames and manipulate them using functions from packages such as dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5",
    "section": "2.1 Installing and launching R packages",
    "text": "2.1 Installing and launching R packages\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "title": "Hands-on Exercise 5",
    "section": "3.1 Importing network data from files",
    "text": "3.1 Importing network data from files\nIn this step, I will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "title": "Hands-on Exercise 5",
    "section": "3.2 Reviewing the imported data",
    "text": "3.2 Reviewing the imported data\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "title": "Hands-on Exercise 5",
    "section": "3.3 Wrangling time",
    "text": "3.3 Wrangling time\nThe code chunk below will be used to perform the changes.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "title": "Hands-on Exercise 5",
    "section": "3.4 Reviewing the revised date fields",
    "text": "3.4 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "title": "Hands-on Exercise 5",
    "section": "3.5 Wrangling attributes",
    "text": "3.5 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, I will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "title": "Hands-on Exercise 5",
    "section": "3.6 Reviewing the revised edges file",
    "text": "3.6 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "title": "Hands-on Exercise 5",
    "section": "4.1 The tbl_graph object",
    "text": "4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network.\nBelow are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "title": "Hands-on Exercise 5",
    "section": "4.2 The dplyr verbs in tidygraph",
    "text": "4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model",
    "title": "Hands-on Exercise 5",
    "section": "4.3 Using tbl_graph() to build tidygraph data model",
    "text": "4.3 Using tbl_graph() to build tidygraph data model\nIn this section, I will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "Hands-on Exercise 5",
    "section": "4.4 Reviewing the output tidygraph’s graph object",
    "text": "4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "title": "Hands-on Exercise 5",
    "section": "4.5 Reviewing the output tidygraph’s graph object",
    "text": "4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "title": "Hands-on Exercise 5",
    "section": "4.6 Changing the active object",
    "text": "4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but we can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "5.1 Plotting a basic network graph",
    "text": "5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "title": "Hands-on Exercise 5",
    "section": "5.2 Changing the default network graph theme",
    "text": "5.2 Changing the default network graph theme\nIn this section, I will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "title": "Hands-on Exercise 5",
    "section": "5.3 Changing the coloring of the plot",
    "text": "5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "title": "Hands-on Exercise 5",
    "section": "5.4 Working with ggraph’s layouts",
    "text": "5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "title": "Hands-on Exercise 5",
    "section": "5.5 Fruchterman and Reingold layout",
    "text": "5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "title": "Hands-on Exercise 5",
    "section": "5.6 Modifying network nodes",
    "text": "5.6 Modifying network nodes\nIn this section, each node will be colourled by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "title": "Hands-on Exercise 5",
    "section": "5.7 Modifying edges",
    "text": "5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "title": "Hands-on Exercise 5",
    "section": "6.1 Working with facet_edges()",
    "text": "6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for me to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges-1",
    "title": "Hands-on Exercise 5",
    "section": "6.2 Working with facet_edges()",
    "text": "6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "title": "Hands-on Exercise 5",
    "section": "6.3 A framed facet graph",
    "text": "6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "title": "Hands-on Exercise 5",
    "section": "6.4 Working with facet_nodes()",
    "text": "6.4 Working with facet_nodes()\nIn the code chunk below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "title": "Hands-on Exercise 5",
    "section": "7.1 Computing centrality indices",
    "text": "7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above：\n\nmutate() of dplyr is used to perform the computation.\n\n\n\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "title": "Hands-on Exercise 5",
    "section": "7.2 Visualising network metrics",
    "text": "7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "title": "Hands-on Exercise 5",
    "section": "7.3 Visualising Community",
    "text": "7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it.\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nggforce and concaveman packages must be installed and included before running the code chunk below.\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "Hands-on Exercise 5",
    "section": "8.1 Data preparation",
    "text": "8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "8.2 Plotting the first interactive network graph",
    "text": "8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "title": "Hands-on Exercise 5",
    "section": "8.3 Working with layout",
    "text": "8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "title": "Hands-on Exercise 5",
    "section": "8.4 Working with visual attributes - Nodes",
    "text": "8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "title": "Hands-on Exercise 5",
    "section": "8.5 Working with visual attributes - Edges",
    "text": "8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "title": "Hands-on Exercise 5",
    "section": "8.6 Interactivity",
    "text": "8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               SmartEDA, tidygraph,\n               ggraph) \n\nIn the code chunk below, ‘fromJSON()’ of jaosnlite package is used to import MC1_graph.json file into R and save the output object:\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id=nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map , by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by=c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  #optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#installing-and-loading-the-required-libraries",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               SmartEDA, tidygraph,\n               ggraph) \n\nIn the code chunk below, ‘fromJSON()’ of jaosnlite package is used to import MC1_graph.json file into R and save the output object:\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`))+\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#creating-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#creating-knowledge-graph",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "id_map &lt;- tibble(id=nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map , by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by=c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  #optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html",
    "title": "Take Home Exercise - classmate",
    "section": "",
    "text": "The original visualization was created by our classmate Calvin Tan Song Hao. Please refer to this link for the original submission."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#population-across-planning-areas-by-sex",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#population-across-planning-areas-by-sex",
    "title": "Take Home Exercise - classmate",
    "section": "3.1 Population Across Planning Areas by Sex",
    "text": "3.1 Population Across Planning Areas by Sex"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#good-design-principles",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#good-design-principles",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.1 Good design principles",
    "text": "3.1.1 Good design principles\n\nUse of inset plot: The use of an inset plot is particularly effective. It provides a magnified view of planning areas with relatively small populations that would otherwise appear almost invisible in the main chart. This ensures that no data is excluded from analysis, promoting inclusiveness and allowing for scale sensitivity without distorting the overall pattern of the chart.\nClear color coding: Color coding by sex is implemented using familiar and easily distinguishable hues—blue for males and red for females. This choice allows viewers to quickly interpret the distribution of population by gender across different areas without needing to consult the legend repeatedly.\nHorizontal bar chart with proper sorting: The horizontal bar chart is well-structured, with planning areas sorted in descending order of total population. This arrangement supports effective comparative analysis and, importantly, accommodates long area names in a way that avoids label clutter, improving overall readability."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#areas-for-further-improvement",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#areas-for-further-improvement",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.2 Areas for further improvement",
    "text": "3.1.2 Areas for further improvement\n\nStacked bars obscure comparison across genders: The female bars are stacked on top of the male bars, making it difficult to compare female populations across planning areas since they do not share a common baseline. This limits interpretability and distorts direct comparisons. A better approach would be to use a population pyramid format, with males and females on opposite sides of a central axis. Additionally, labeling each bar with the exact population figure would provide immediate numerical clarity and make the chart more informative.\nRedundant legend placement and layout inefficiency: Although the legend is useful, it is somewhat redundant given the clear color-coding. It could be relocated near the inset chart to save space and reduce clutter. In the original layout, overlapping labels made it hard to read planning area names. Removing the legend from its current position would allow the chart to be taller and cleaner, improving overall readability.\nLack of summary indicators: The chart would benefit from the addition of vertical median lines for both male and female populations. These lines would serve as reference benchmarks, allowing users to quickly identify which planning areas have populations above or below the median. This simple addition would enhance interpretability and provide a clearer statistical context to the viewer."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#makeover",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#makeover",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.3 Makeover",
    "text": "3.1.3 Makeover\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\n\n# 1 Data prep\ndemography_sex &lt;- sg_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Total = sum(Pop)) %&gt;%\n  filter(Total &gt; 0) %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop)) %&gt;%\n  ungroup()\n\nstats &lt;- demography_sex %&gt;%\n  summarise(\n    total   = sum(abs(Pop)),\n    male    = sum(abs(Pop[Sex==\"Males\"])),\n    female  = sum(Pop[Sex==\"Females\"]),\n    ratio   = sum(abs(Pop[Sex==\"Males\"])) / sum(Pop[Sex==\"Females\"])\n  )\nstats_text &lt;- paste0(\n  \"Total Pop: \",   comma(stats$total),   \"\\n\",\n  \"Male Pop: \",    comma(stats$male),    \"\\n\",\n  \"Female Pop: \",  comma(stats$female),  \"\\n\",\n  \"M:F Ratio: \",   round(stats$ratio,2)\n)\n\n# 2 Ordering\npa_order &lt;- demography_sex %&gt;%\n  distinct(PA, Total) %&gt;%\n  arrange(desc(Total)) %&gt;%\n  pull(PA)\ndemography_sex$PA &lt;- factor(demography_sex$PA, levels = rev(pa_order))\n\n# 3 Identify inset PAs (Newton → Seletar)\npa_seq    &lt;- pa_order\nstart_idx &lt;- which(pa_seq == \"Newton\")\nend_idx   &lt;- which(pa_seq == \"Seletar\")\ninset_order &lt;- pa_seq[start_idx:end_idx]\ninset_data  &lt;- demography_sex %&gt;%\n  filter(PA %in% inset_order) %&gt;%\n  mutate(PA = factor(PA, levels = rev(inset_order)))\n\n# 4 Medians\nmale_med   &lt;- demography_sex %&gt;% filter(Sex==\"Males\")   %&gt;% pull(Pop) %&gt;% abs() %&gt;% median()\nfemale_med &lt;- demography_sex %&gt;% filter(Sex==\"Females\") %&gt;% pull(Pop)          %&gt;% median()\n\n# 5 Highlight region\nhighlight_pos &lt;- match(inset_order, levels(demography_sex$PA))\nymin_hl &lt;- min(highlight_pos) - 0.5\nymax_hl &lt;- max(highlight_pos) + 0.5\n\nbox_pops &lt;- demography_sex %&gt;%\n  filter(PA %in% c(\"Newton\",\"Tengah\")) %&gt;%\n  pull(Pop)\n\nxmin_box &lt;- min(box_pops) \nxmax_box &lt;- max(box_pops) \n\npad &lt;- (xmax_box - xmin_box) * 2\nxmin_box &lt;- xmin_box - pad\nxmax_box &lt;- xmax_box + pad\n\n# DEFINE INSIDE vs OUTSIDE for main plot\ninside_main  &lt;- pa_order[1:which(pa_order==\"Jurong East\")]\noutside_main &lt;- setdiff(pa_order, inside_main)\n\n# DEFINE INSIDE vs OUTSIDE for inset plot\ninside_inset  &lt;- inset_order[1:which(inset_order==\"Changi\")]\noutside_inset &lt;- setdiff(inset_order, inside_inset)\n\n# MAIN PYRAMID\nmain_plot &lt;- ggplot(demography_sex, aes(x = Pop, y = PA, fill = Sex)) +\n  \n  annotate(\"rect\",\n         xmin = xmin_box, xmax = xmax_box,\n         ymin = ymin_hl,  ymax = ymax_hl,\n         colour = \"black\", linetype = \"dotted\",\n         size = 1, fill = NA) +\n  \n  geom_col(width = 0.8) +\n  \n  # summary text in left blank area\n  annotate(\"text\",\n           x    = min(demography_sex$Pop) * 0.8,\n           y    = nlevels(demography_sex$PA) * 0.2,\n           label= stats_text,\n           hjust= 0, size = 3.5, colour = \"grey20\") +\n  \n  # inside labels (Tampines → Jurong East), shifted to bar ends but still inside\n  geom_text(\n    data = filter(demography_sex, PA %in% inside_main),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(demography_sex, PA %in% inside_main)$Sex == \"Males\",\n      0.02, 0.98\n    ),\n    vjust = 0.5,\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  # outside labels (below Rochor → Seletar)\n  geom_text(\n    data = filter(demography_sex, PA %in% outside_main),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(demography_sex, PA %in% outside_main)$Sex == \"Males\",\n      1.1, -0.1\n    ),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  geom_vline(xintercept = -male_med,   linetype=\"longdash\", size=1, colour=\"grey40\") +\n  geom_vline(xintercept =  female_med, linetype=\"longdash\", size=1, colour=\"grey40\") +\n  \n  annotate(\"text\",\n           x    = -male_med, y = Inf,\n           label= paste0(\"Median\\n\", comma(male_med)),\n           hjust= 1.1, vjust= -0.5,\n           size = 3, colour = \"grey20\") +\n  annotate(\"text\",\n           x    =  female_med, y = Inf,\n           label= paste0(\"Median\\n\", comma(female_med)),\n           hjust= -0.1, vjust= -0.5,\n           size = 3, colour = \"grey20\") +\n  \n  scale_fill_manual(values = c(\"Males\"=\"#ADD8E6\",\"Females\"=\"#FFB6C1\")) +\n  scale_x_continuous(\n    labels = function(x) comma(abs(x))\n  ) +\n  scale_y_discrete(expand = expansion(add = c(0,2))) +\n  \n  labs(x=\"Population\", y=\"Planning Area\") +\n  theme_minimal() +\n  theme(\n    plot.title      = element_blank(),\n    axis.title      = element_text(size=12),\n    axis.text       = element_text(size=9),\n    legend.position = \"none\"\n  ) +\n  coord_cartesian(clip=\"off\")\n\n# INSET PLOT\ninset_plot &lt;- ggplot(inset_data, aes(x = Pop, y = PA, fill = Sex)) +\n  geom_col(width = 0.8) +\n  \n  # inside inset labels (Newton → Changi)\n  geom_text(\n    data = filter(inset_data, PA %in% inside_inset),\n    aes(label = comma(abs(Pop))),\n    position = position_stack(vjust = 0.5),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  # outside inset labels (Mandai → Seletar)\n  geom_text(\n    data = filter(inset_data, PA %in% outside_inset),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(inset_data, PA %in% outside_inset)$Sex == \"Males\",\n      1.1, -0.1\n    ),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  scale_fill_manual(values = c(\"Males\"=\"#ADD8E6\",\"Females\"=\"#FFB6C1\")) +\n  scale_x_continuous(\n    labels = function(x) comma(abs(x))\n  ) +\n  theme_minimal(base_size=9) +\n  theme(\n    axis.title       = element_blank(),\n    axis.text.y      = element_text(size=7),\n    axis.text.x      = element_text(size=7),\n    panel.background = element_rect(fill=\"white\", colour=NA),\n    panel.grid.major = element_line(colour=\"grey90\"),\n    legend.position  = \"none\"\n  )\n\n# DOTTED BOX FOR THE INSET\nzoom_box &lt;- ggplot() +\n  theme_void() +\n  annotate(\"rect\",\n           xmin = 0, xmax = 1,\n           ymin = 0, ymax = 1,\n           colour = \"black\", linetype = \"dotted\", size = 1, fill = NA)\n\n# ASSEMBLE EVERYTHING\ntitle_plot &lt;- ggdraw() +\n  draw_label(\"Population Across Planning Areas by Sex\",\n             fontface=\"bold\", size=16, hjust=0.3)\n\nlabel_plot &lt;- ggdraw() +\n  draw_label(\"Males\",   x=0.3, y=0.5, fontface=\"bold\", size=13, colour=\"#ADD8E6\") +\n  draw_label(\"Females\", x=0.8, y=0.5, fontface=\"bold\", size=13, colour=\"#FFB6C1\")\n\nfinal_plot &lt;- plot_grid(\n  title_plot,\n  label_plot,\n  ggdraw(main_plot) +\n    draw_plot(inset_plot, x=0.665, y=0.06, width=0.33, height=0.40) +\n    draw_plot(zoom_box,      x=0.65, y=0.07, width=0.35, height=0.40),\n  ncol=1,\n  rel_heights=c(0.04,0.07,0.89)\n)\n\nprint(final_plot)"
  }
]