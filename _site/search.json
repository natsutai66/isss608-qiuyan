[
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 1",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes,\n               tidyverse, tidytext,treemapify)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "title": "Take Home Exercise 1",
    "section": "2.2 Importing dataset",
    "text": "2.2 Importing dataset\n\nThe codeExplaination\n\n\n\npopulation_data &lt;- read_csv(\"respopagesex2024.csv\") %&gt;%\n  mutate(Age = as.numeric(Age))\n\nglimpse(population_data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 1…\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\nThe code chunk below imports the dataset respopagesex2024.csv and load the CSV file into a dataframe named population_data.\nAfter import, the mutate() function is applied to convert the Age column from character to numeric format.\nLastly, the glimpse() function provides a concise overview of the dataset’s structure, displaying column names, data types, and sample values."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "title": "Take Home Exercise 1",
    "section": "2.3 Dataset for visuallisation 1",
    "text": "2.3 Dataset for visuallisation 1\n\nThe codeExplaination\n\n\n\npyramid_data &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = cut(\n      Age,\n      breaks = c(seq(0, 100, by = 5), Inf),\n      right = FALSE,\n      labels = c(paste(seq(0, 95, 5), seq(4, 99, 5), sep = \"–\"), \"100+\")\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\n\n\nThe code below prepares the dataset population_data for visualising a population pyramid by first converting the Age column to numeric format. It then categorises individual ages into 5-year intervals using the cut() function, creating a new variable AgeGroup with labels such as “0–4”, “5–9”, …, and “100+”. Any rows with missing AgeGroup values are filtered out. The data is then grouped by both AgeGroup and Sex, and the total population (Pop) within each group is calculated using summarise(). Finally, to enable the mirrored bar chart structure of a population pyramid, male population values are converted to negative using mutate() with an ifelse() condition. This transformation allows males to be displayed on the left and females on the right of the central axis in the plot.\n\n\n\n\nThe codeExplaination\n\n\n\npyramid_data_grouped &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(AgeGroup = factor(\n    AgeGroup,\n    levels = c(\"Children\", \"Teenager\", \"Young Adult\", \"Adult\", \"Middle-age\", \"Elderly\")\n  ))\n\n\n\nThe code below prepares the dataset population_data for visualising population distribution by broad age groups. It first converts the Age column to numeric format and then uses the case_when() function to classify individuals into six custom age groups: “Children” (≤12), “Teenager” (13–18), “Young Adult” (19–25), “Adult” (26–44), “Middle-age” (45–65), and “Elderly” (&gt;65). Any rows with undefined AgeGroup values are excluded using filter(). The dataset is then grouped by both AgeGroup and Sex, and the total population within each group is calculated using summarise(). Finally, the AgeGroup variable is converted into an ordered factor to ensure consistent and logical plotting on the x-axis."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "title": "Take Home Exercise 1",
    "section": "2.4 Dataset for visuallisation 2",
    "text": "2.4 Dataset for visuallisation 2\n\nThe codeExplaination\n\n\n\nplanning_area_population &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  mutate(Pop_thousands = Total_Pop / 1000)\n\n\n\nThe code groups the population_data by PA (Planning Area) and then uses summarise() to calculate the total population (Total_Pop) within each area by summing the Pop values. The .groups = \"drop\" argument ensures the resulting data frame is ungrouped for further processing. Next, it filters out any planning areas with a total population of zero to maintain clarity in the visualization. Finally, the code introduces a new variable, Pop_thousands, by dividing the total population by 1,000 to express values in thousands.\n\n\n\n\nThe codeExplaination\n\n\n\npopulation_age_group_top20 &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  group_by(AgeGroup) %&gt;%\n  slice_max(order_by = Total_Pop, n = 20) %&gt;%\n  ungroup()\n\n\n\nThe provided code prepares a dataset to visualize the top 20 planning areas in Singapore by population across different age groups. It begins by converting the Age variable to a numeric format and classifying individuals into custom age groups such as “Children,” “Teenager,” “Young Adult,” “Adult,” “Middle-age,” and “Elderly” using the case_when() function. Rows with undefined age groups are removed using filter(). The data is then grouped by PA (Planning Area) and AgeGroup, and the total population for each group is calculated using summarise(). After filtering out planning areas with zero population, the code selects the top 20 planning areas per age group based on total population using slice_max(). Finally, ungroup() is applied to prepare the data for plotting."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "title": "Take Home Exercise 1",
    "section": "2.5 Dataset for visuallisation 3",
    "text": "2.5 Dataset for visuallisation 3\n\nage_distribution &lt;- population_data %&gt;%\n  mutate(Age = as.numeric(Age)) %&gt;%\n  filter(Pop &gt; 0) %&gt;%\n  uncount(weights = Pop)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "title": "Take Home Exercise 1",
    "section": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex",
    "text": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# --- Plot 1: Population Pyramid ---\np1 &lt;- ggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9, color = \"white\") +\n  coord_flip() +\n  scale_y_continuous(\n    labels = function(x) scales::comma(abs(x)),\n    breaks = scales::pretty_breaks(n = 8)\n  ) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population Pyramid of Singapore\",\n    x = \"Age Group (5-year bins)\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 12),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    legend.position = \"none\"  # hide this legend\n  )\n\n# --- Plot 2: Age Group Bar Chart ---\np2 &lt;- ggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Total_Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population by Age Groups\",\n    x = \"Age Group\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text = element_text(size = 10),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    legend.position = \"none\"  # hide legend here too\n  )\n\n# --- Combine and add unified legend + age group note ---\ncombined &lt;- (p1 + p2) + plot_layout(guides = \"collect\") & theme(legend.position = \"bottom\")\n\n# Add age group definitions as caption text\ncombined +\n  plot_annotation(\n    caption = \"Age Group Ranges: Children: ≤12 | Teenager: 13–18 | Young Adult: 19–25 | Adult: 26–44 | Middle-age: 45–65 | Elderly: ≥65\",\n    theme = theme(plot.caption = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))\n  )\n\n\n\n\n\nInsight:\nThe population pyramid reveals a mature demographic structure with a bulge in the 40–59 age bands, reflecting Singapore’s aging population. The narrower base in the younger cohorts (ages 0–14) suggests declining birth rates, while the balanced width across genders indicates no significant sex disparity at each age group.\nThe grouped bar chart further aggregates the population into broader life stages. The highest population lies in the “Middle-age” (45–65) and “Adult” (26–44) categories, which together form the majority of the working-age population. In contrast, the “Children” and “Teenager” groups are notably smaller, reinforcing concerns about future population replacement and dependency ratios. The elderly (65+) also form a substantial group, highlighting the importance of eldercare and retirement policy planning.\nTogether, the visualizations underscore critical demographic challenges: a shrinking youth base, a growing senior population, and the need for sustainable workforce and social support strategies."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---horizontal-bar-plot-of-population-density",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---horizontal-bar-plot-of-population-density",
    "title": "Take Home Exercise 1",
    "section": "3.2 Visuallisation 2 - Horizontal Bar Plot of Population Density",
    "text": "3.2 Visuallisation 2 - Horizontal Bar Plot of Population Density\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Treemap plot\np1 &lt;- ggplot(planning_area_population, aes(area = Pop_thousands, label = PA, fill = Pop_thousands)) +\n  geom_treemap() +\n  geom_treemap_text(\n    colour = \"black\",\n    place = \"centre\",\n    reflow = TRUE,\n    size = 12\n  ) +\n  scale_fill_viridis_c(option = \"D\", labels = scales::comma_format(suffix = \"k\")) +\n  labs(\n    title = \"Treemap of Total Population by Planning Area (in Thousands)\",\n    fill = \"Population (thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    legend.position = \"bottom\"\n  )\n\n# Bar plot\np2 &lt;- ggplot(population_age_group_top20, aes(x = reorder_within(PA, Total_Pop, AgeGroup), y = Total_Pop, fill = AgeGroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ AgeGroup, scales = \"free\") +\n  scale_x_reordered() +\n  coord_flip() +\n  labs(\n    title = \"Top 20 Planning Areas by Age Group Population\",\n    x = \"Planning Area\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 16),\n    axis.text.y = element_text(size = 10),\n    plot.title = element_text(face = \"bold\", size = 18)\n  )\n\n# combine both plots\np1 / p2 + plot_layout(heights = c(1, 2))"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---boxplot-of-age-distribution-by-planning-area",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---boxplot-of-age-distribution-by-planning-area",
    "title": "Take Home Exercise 1",
    "section": "3.3 Visuallisation 3 - Boxplot of Age Distribution by Planning Area",
    "text": "3.3 Visuallisation 3 - Boxplot of Age Distribution by Planning Area\n\n# Order planning areas by median age for better readability\nordered_area &lt;- age_distribution %&gt;%\n  group_by(PA) %&gt;%\n  summarise(median_age = median(Age)) %&gt;%\n  arrange(median_age) %&gt;%\n  pull(PA)\n\n# Convert PA into factor with specified order\nage_distribution &lt;- age_distribution %&gt;%\n  mutate(PA = factor(PA, levels = ordered_area))\n\n# Boxplot\nggplot(age_distribution, aes(x = Age, y = PA)) +\n  geom_boxplot(fill = \"skyblue\", color = \"grey30\", outlier.size = 0.5) +\n  labs(\n    title = \"Age Distribution by Planning Area (June 2024)\",\n    x = \"Age\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 9),\n    plot.title = element_text(face = \"bold\", size = 14)\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html",
    "title": "Hands-on Exercise 3 part 2",
    "section": "",
    "text": "This hands-on exercise shows how to create animated data visualisation by using gganimate and plotly r packages. At the same time, this exercise demostrates how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nKey concepts and terminology related to this type of visualization:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\nBefore creating animated graphs, it is important to consider whether the effort is justified. While animation may not significantly enhance exploratory data analysis, it can be highly effective in presentations by helping the audience engage with the topic more deeply compared to static visuals"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3 part 2",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#terminology",
    "title": "Hands-on Exercise 3 part 2",
    "section": "",
    "text": "Key concepts and terminology related to this type of visualization:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\nBefore creating animated graphs, it is important to consider whether the effort is justified. While animation may not significantly enhance exploratory data analysis, it can be highly effective in presentations by helping the audience engage with the topic more deeply compared to static visuals"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3 part 2",
    "section": "2.1 Loading the R packages",
    "text": "2.1 Loading the R packages\nThe code chunk below checks, installs and loads the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n2.2 Importing the data\nThe code chunk below imports Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(all_of(col), as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3 part 2",
    "section": "3 Animated Data Visualisation: gganimate methods",
    "text": "3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3 part 2",
    "section": "3.1 Building a static population bubble plot",
    "text": "3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3 part 2",
    "section": "3.2 Building the animated bubble plot",
    "text": "3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3 part 2",
    "section": "4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, an animated bubble plot is created by using ggplotly() method.\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\ngg &lt;- ggplot(globalPop,\n             aes(x = Old,\n                 y = Young,\n                 size = Population,\n                 colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(x = '% Aged',\n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3 part 2",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, an animated bubble plot is created by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on_Ex02",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "title": "Hands-on_Ex02",
    "section": "Importing the data",
    "text": "Importing the data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#summary",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#summary",
    "title": "Hands-on_Ex02",
    "section": "summary",
    "text": "summary\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "3.1 Working with ggrepel",
    "text": "3.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Ex02",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths score\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on_Ex02",
    "section": "4.2 Working with hrbthems package",
    "text": "4.2 Working with hrbthems package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on_Ex02",
    "section": "5.1 Creating Composite Graphics: pathwork methods",
    "text": "5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\nTwo-Column Layout using the Plus Sign +. Parenthesis () to create a subplot group. Two-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\n\n(p1 /p2) | p3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Ex02",
    "section": "5.4 Creating a composite figure with tag",
    "text": "5.4 Creating a composite figure with tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on_Ex02",
    "section": "5.5 Creating figure with insert",
    "text": "5.5 Creating figure with insert\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on_Ex02",
    "section": "5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.6 Creating a composite figure by using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html",
    "title": "Hands-on Exercise 3 part 1",
    "section": "",
    "text": "This hands-on exercise shows how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3 part 1",
    "section": "Tooltip effect with tooltip aesthetic",
    "text": "Tooltip effect with tooltip aesthetic\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\nImproved plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    binwidth = 1,\n    stackgroups = TRUE,\n    dotsize = 0.8,          # Make dots bigger\n    color = \"darkblue\",     # Dot border color\n    fill = \"skyblue\",       # Dot fill color\n    method = \"histodot\",\n    binaxis = \"x\"           # Stack along x-axis\n  ) +\n  scale_y_continuous(NULL, breaks = NULL) +  # Hide y-axis\n  labs(\n    title = \"Distribution of Maths Scores\",\n    x = \"Maths Score\",\n    y = NULL\n  ) +\n  theme_minimal() +          # Cleaner background\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.text.x = element_text(size = 12),\n    axis.title.x = element_text(size = 14)\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,            # Slightly bigger\n  height_svg = 8 * 0.618    \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.1 Customising Tooltip style",
    "text": "6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)   \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.2 Displaying statistics on tooltip",
    "text": "6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.3 Hover effect with data_id aesthetic",
    "text": "6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)  \n\n\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#styling-hover-effect",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.4 Styling hover effect",
    "text": "6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.5 Combining tooltip and hover effect",
    "text": "6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.6 Click effect with onclick",
    "text": "6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618) \n\n\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.7 Coordinated Multiple Views with ggiraph",
    "text": "6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nThe following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.2 Working with visual variable: plot_ly() method",
    "text": "7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\nClick on the colour symbol at the legend.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.4 Coordinated Multiple Views with plotly",
    "text": "7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3 part 1",
    "section": "8.1 Interactive Data Table: DT package",
    "text": "8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "8.2 Linked brushing: crosstalk method",
    "text": "8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "◔.̮◔✧ Hi, I am Qiu Yan. Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course. Thank you for visiting ~"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "title": "Take Home Exercise 1",
    "section": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group",
    "text": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Treemap plot\np1 &lt;- ggplot(planning_area_population, aes(area = Pop_thousands, label = PA, fill = Pop_thousands)) +\n  geom_treemap() +\n  geom_treemap_text(\n    colour = \"black\",\n    place = \"centre\",\n    reflow = TRUE,\n    size = 12\n  ) +\n  scale_fill_viridis_c(option = \"D\", labels = scales::comma_format(suffix = \"k\")) +\n  labs(\n    title = \"Treemap of Total Population by Planning Area (in Thousands)\",\n    fill = \"Population (thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    legend.position = \"bottom\"\n  )\n\n# Bar plot\np2 &lt;- ggplot(population_age_group_top20, aes(x = reorder_within(PA, Total_Pop, AgeGroup), y = Total_Pop, fill = AgeGroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ AgeGroup, scales = \"free\") +\n  scale_x_reordered() +\n  coord_flip() +\n  labs(\n    title = \"Top 20 Planning Areas by Age Group Population\",\n    x = \"Planning Area\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 16),\n    axis.text.y = element_text(size = 10),\n    plot.title = element_text(face = \"bold\", size = 18)\n  )\n\n# combine both plots\np1 / p2 + plot_layout(heights = c(1, 2))\n\n\n\n\n\nInsight:\nThe treemap provides a high-level view of the total population across planning areas, showing that Tampines, Bedok, Sengkang, and Jurong West are the most densely populated regions in Singapore. These areas dominate in population size, occupying larger blocks and warmer color tones.\nThe bar charts below offer a breakdown by age group, revealing nuanced patterns: Tampines and Sengkang consistently rank high across most age groups, especially for adults and children, suggesting a family-oriented residential profile. In contrast, areas like Bedok have a significantly larger elderly population, while Woodlands stands out in the young adult category.\nThe variation across age groups highlights the differing demographic compositions of planning areas, which can inform planning for schools, eldercare, housing, and transportation needs."
  }
]