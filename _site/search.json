[
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               SmartEDA, tidygraph,\n               ggraph) \n\nIn the code chunk below, ‘fromJSON()’ of jaosnlite package is used to import MC1_graph.json file into R and save the output object:\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id=nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map , by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by=c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  #optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#installing-and-loading-the-required-libraries",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               SmartEDA, tidygraph,\n               ggraph) \n\nIn the code chunk below, ‘fromJSON()’ of jaosnlite package is used to import MC1_graph.json file into R and save the output object:\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`))+\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#creating-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#creating-knowledge-graph",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "id_map &lt;- tibble(id=nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map , by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by=c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  #optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html",
    "title": "Take Home Exercise - classmate",
    "section": "",
    "text": "The original visualization was created by our classmate Calvin Tan Song Hao. Please refer to this link for the original submission."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#population-across-planning-areas-by-sex",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#population-across-planning-areas-by-sex",
    "title": "Take Home Exercise - classmate",
    "section": "3.1 Population Across Planning Areas by Sex",
    "text": "3.1 Population Across Planning Areas by Sex"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#good-design-principles",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#good-design-principles",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.1 Good design principles",
    "text": "3.1.1 Good design principles\n\nUse of inset plot: The use of an inset plot is particularly effective. It provides a magnified view of planning areas with relatively small populations that would otherwise appear almost invisible in the main chart. This ensures that no data is excluded from analysis, promoting inclusiveness and allowing for scale sensitivity without distorting the overall pattern of the chart.\nClear color coding: Color coding by sex is implemented using familiar and easily distinguishable hues—blue for males and red for females. This choice allows viewers to quickly interpret the distribution of population by gender across different areas without needing to consult the legend repeatedly.\nHorizontal bar chart with proper sorting: The horizontal bar chart is well-structured, with planning areas sorted in descending order of total population. This arrangement supports effective comparative analysis and, importantly, accommodates long area names in a way that avoids label clutter, improving overall readability."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#areas-for-further-improvement",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#areas-for-further-improvement",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.2 Areas for further improvement",
    "text": "3.1.2 Areas for further improvement\n\nStacked bars obscure comparison across genders: The female bars are stacked on top of the male bars, making it difficult to compare female populations across planning areas since they do not share a common baseline. This limits interpretability and distorts direct comparisons. A better approach would be to use a population pyramid format, with males and females on opposite sides of a central axis. Additionally, labeling each bar with the exact population figure would provide immediate numerical clarity and make the chart more informative.\nRedundant legend placement and layout inefficiency: Although the legend is useful, it is somewhat redundant given the clear color-coding. It could be relocated near the inset chart to save space and reduce clutter. In the original layout, overlapping labels made it hard to read planning area names. Removing the legend from its current position would allow the chart to be taller and cleaner, improving overall readability.\nLack of summary indicators: The chart would benefit from the addition of vertical median lines for both male and female populations. These lines would serve as reference benchmarks, allowing users to quickly identify which planning areas have populations above or below the median. This simple addition would enhance interpretability and provide a clearer statistical context to the viewer."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#makeover",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#makeover",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.3 Makeover",
    "text": "3.1.3 Makeover\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\n\n# 1 Data prep\ndemography_sex &lt;- sg_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Total = sum(Pop)) %&gt;%\n  filter(Total &gt; 0) %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop)) %&gt;%\n  ungroup()\n\nstats &lt;- demography_sex %&gt;%\n  summarise(\n    total   = sum(abs(Pop)),\n    male    = sum(abs(Pop[Sex==\"Males\"])),\n    female  = sum(Pop[Sex==\"Females\"]),\n    ratio   = sum(abs(Pop[Sex==\"Males\"])) / sum(Pop[Sex==\"Females\"])\n  )\nstats_text &lt;- paste0(\n  \"Total Pop: \",   comma(stats$total),   \"\\n\",\n  \"Male Pop: \",    comma(stats$male),    \"\\n\",\n  \"Female Pop: \",  comma(stats$female),  \"\\n\",\n  \"M:F Ratio: \",   round(stats$ratio,2)\n)\n\n# 2 Ordering\npa_order &lt;- demography_sex %&gt;%\n  distinct(PA, Total) %&gt;%\n  arrange(desc(Total)) %&gt;%\n  pull(PA)\ndemography_sex$PA &lt;- factor(demography_sex$PA, levels = rev(pa_order))\n\n# 3 Identify inset PAs (Newton → Seletar)\npa_seq    &lt;- pa_order\nstart_idx &lt;- which(pa_seq == \"Newton\")\nend_idx   &lt;- which(pa_seq == \"Seletar\")\ninset_order &lt;- pa_seq[start_idx:end_idx]\ninset_data  &lt;- demography_sex %&gt;%\n  filter(PA %in% inset_order) %&gt;%\n  mutate(PA = factor(PA, levels = rev(inset_order)))\n\n# 4 Medians\nmale_med   &lt;- demography_sex %&gt;% filter(Sex==\"Males\")   %&gt;% pull(Pop) %&gt;% abs() %&gt;% median()\nfemale_med &lt;- demography_sex %&gt;% filter(Sex==\"Females\") %&gt;% pull(Pop)          %&gt;% median()\n\n# 5 Highlight region\nhighlight_pos &lt;- match(inset_order, levels(demography_sex$PA))\nymin_hl &lt;- min(highlight_pos) - 0.5\nymax_hl &lt;- max(highlight_pos) + 0.5\n\nbox_pops &lt;- demography_sex %&gt;%\n  filter(PA %in% c(\"Newton\",\"Tengah\")) %&gt;%\n  pull(Pop)\n\nxmin_box &lt;- min(box_pops) \nxmax_box &lt;- max(box_pops) \n\npad &lt;- (xmax_box - xmin_box) * 2\nxmin_box &lt;- xmin_box - pad\nxmax_box &lt;- xmax_box + pad\n\n# DEFINE INSIDE vs OUTSIDE for main plot\ninside_main  &lt;- pa_order[1:which(pa_order==\"Jurong East\")]\noutside_main &lt;- setdiff(pa_order, inside_main)\n\n# DEFINE INSIDE vs OUTSIDE for inset plot\ninside_inset  &lt;- inset_order[1:which(inset_order==\"Changi\")]\noutside_inset &lt;- setdiff(inset_order, inside_inset)\n\n# MAIN PYRAMID\nmain_plot &lt;- ggplot(demography_sex, aes(x = Pop, y = PA, fill = Sex)) +\n  \n  annotate(\"rect\",\n         xmin = xmin_box, xmax = xmax_box,\n         ymin = ymin_hl,  ymax = ymax_hl,\n         colour = \"black\", linetype = \"dotted\",\n         size = 1, fill = NA) +\n  \n  geom_col(width = 0.8) +\n  \n  # summary text in left blank area\n  annotate(\"text\",\n           x    = min(demography_sex$Pop) * 0.8,\n           y    = nlevels(demography_sex$PA) * 0.2,\n           label= stats_text,\n           hjust= 0, size = 3.5, colour = \"grey20\") +\n  \n  # inside labels (Tampines → Jurong East), shifted to bar ends but still inside\n  geom_text(\n    data = filter(demography_sex, PA %in% inside_main),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(demography_sex, PA %in% inside_main)$Sex == \"Males\",\n      0.02, 0.98\n    ),\n    vjust = 0.5,\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  # outside labels (below Rochor → Seletar)\n  geom_text(\n    data = filter(demography_sex, PA %in% outside_main),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(demography_sex, PA %in% outside_main)$Sex == \"Males\",\n      1.1, -0.1\n    ),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  geom_vline(xintercept = -male_med,   linetype=\"longdash\", size=1, colour=\"grey40\") +\n  geom_vline(xintercept =  female_med, linetype=\"longdash\", size=1, colour=\"grey40\") +\n  \n  annotate(\"text\",\n           x    = -male_med, y = Inf,\n           label= paste0(\"Median\\n\", comma(male_med)),\n           hjust= 1.1, vjust= -0.5,\n           size = 3, colour = \"grey20\") +\n  annotate(\"text\",\n           x    =  female_med, y = Inf,\n           label= paste0(\"Median\\n\", comma(female_med)),\n           hjust= -0.1, vjust= -0.5,\n           size = 3, colour = \"grey20\") +\n  \n  scale_fill_manual(values = c(\"Males\"=\"#ADD8E6\",\"Females\"=\"#FFB6C1\")) +\n  scale_x_continuous(\n    labels = function(x) comma(abs(x))\n  ) +\n  scale_y_discrete(expand = expansion(add = c(0,2))) +\n  \n  labs(x=\"Population\", y=\"Planning Area\") +\n  theme_minimal() +\n  theme(\n    plot.title      = element_blank(),\n    axis.title      = element_text(size=12),\n    axis.text       = element_text(size=9),\n    legend.position = \"none\"\n  ) +\n  coord_cartesian(clip=\"off\")\n\n# INSET PLOT\ninset_plot &lt;- ggplot(inset_data, aes(x = Pop, y = PA, fill = Sex)) +\n  geom_col(width = 0.8) +\n  \n  # inside inset labels (Newton → Changi)\n  geom_text(\n    data = filter(inset_data, PA %in% inside_inset),\n    aes(label = comma(abs(Pop))),\n    position = position_stack(vjust = 0.5),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  # outside inset labels (Mandai → Seletar)\n  geom_text(\n    data = filter(inset_data, PA %in% outside_inset),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(inset_data, PA %in% outside_inset)$Sex == \"Males\",\n      1.1, -0.1\n    ),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  scale_fill_manual(values = c(\"Males\"=\"#ADD8E6\",\"Females\"=\"#FFB6C1\")) +\n  scale_x_continuous(\n    labels = function(x) comma(abs(x))\n  ) +\n  theme_minimal(base_size=9) +\n  theme(\n    axis.title       = element_blank(),\n    axis.text.y      = element_text(size=7),\n    axis.text.x      = element_text(size=7),\n    panel.background = element_rect(fill=\"white\", colour=NA),\n    panel.grid.major = element_line(colour=\"grey90\"),\n    legend.position  = \"none\"\n  )\n\n# DOTTED BOX FOR THE INSET\nzoom_box &lt;- ggplot() +\n  theme_void() +\n  annotate(\"rect\",\n           xmin = 0, xmax = 1,\n           ymin = 0, ymax = 1,\n           colour = \"black\", linetype = \"dotted\", size = 1, fill = NA)\n\n# ASSEMBLE EVERYTHING\ntitle_plot &lt;- ggdraw() +\n  draw_label(\"Population Across Planning Areas by Sex\",\n             fontface=\"bold\", size=16, hjust=0.3)\n\nlabel_plot &lt;- ggdraw() +\n  draw_label(\"Males\",   x=0.3, y=0.5, fontface=\"bold\", size=13, colour=\"#ADD8E6\") +\n  draw_label(\"Females\", x=0.8, y=0.5, fontface=\"bold\", size=13, colour=\"#FFB6C1\")\n\nfinal_plot &lt;- plot_grid(\n  title_plot,\n  label_plot,\n  ggdraw(main_plot) +\n    draw_plot(inset_plot, x=0.665, y=0.06, width=0.33, height=0.40) +\n    draw_plot(zoom_box,      x=0.65, y=0.07, width=0.35, height=0.40),\n  ncol=1,\n  rel_heights=c(0.04,0.07,0.89)\n)\n\nprint(final_plot)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "This exercise delivers three static analytical visualisations and concise commentaries that explain the demographic structure and geographic distribution of Singapore residents in June 2024. Using the “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex” dataset from the Department of Statistics, the data were wrangled entirely with the tidyverse and visualised with ggplot2 and its extensions, adhering to the exercise requirement for reproducible R code and non‑interactive graphics.\n\nNation‑wide age profile – a population pyramid and companion bar chart depict gender balance, cohort sizes, and the dominance of the 26‑65 workforce alongside a contracting youth base and expanding senior segment.\nSpatial distribution – a treemap ranks planning areas by total residents, while six faceted bar charts rank them within each major age group, revealing contrasts such as Tampines’ family orientation versus Bedok’s larger elderly share.\nAge‑structure contrasts – a bubble plot (average age vs population, bubble = senior share) and violin plots of the ten largest areas detail how mean age and intra‑area distributions vary, pinpointing estates like Ang Mo Kio (oldest) and Punggol (youngest).\n\nTogether these visuals provide a foundation for evidence‑based recommendations on schooling capacity, eldercare facilities, housing typology, and transport planning across Singapore’s diverse neighbourhoods."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 1",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\n\nThe codeThe libraries\n\n\n\npacman::p_load(scales, ggrepel, patchwork, \n               ggthemes, hrbrthemes,tidyverse, \n               tidytext,treemapify) \n\n\n\n\n\n\n\n\n\n\nname\npurpose\n\n\n\n\nscales\nNicely formats axis ticks and legends.\n\n\nggrepel\nAdds non‑overlapping text labels to ggplots.\n\n\npatchwork\nCombines multiple ggplots into a single figure.\n\n\nggthemes\nSupplies predefined aesthetic themes.\n\n\nhrbrthemes\nExtends ggthemes with modern, typographically friendly themes and font support.\n\n\ntidyverse\nMeta‑package that loads ggplot2, dplyr, tidyr, readr, stringr, forcats, etc. — the backbone for data import, transformation, and visualisation.\n\n\ntidytext\nTokenises and analyses text.\n\n\ntreemapify\nCreates ggplot‑compatible treemaps."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "title": "Take Home Exercise 1",
    "section": "2.2 Importing dataset",
    "text": "2.2 Importing dataset\n\nThe codeExplaination\n\n\n\npopulation_data &lt;- read_csv(\"respopagesex2024.csv\") %&gt;%\n  mutate(Age = as.numeric(Age))\n\nglimpse(population_data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 1…\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\nThe code imports the dataset respopagesex2024.csv and load the CSV file into a dataframe named population_data.\nAfter import, the mutate() function is applied to convert the Age column from character to numeric format.\nLastly, the glimpse() function provides a concise overview of the dataset’s structure, displaying column names, data types, and sample values."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "title": "Take Home Exercise 1",
    "section": "2.3 Dataset for visuallisation 1",
    "text": "2.3 Dataset for visuallisation 1\n\nThe codeExplaination\n\n\n\npyramid_data &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = cut(\n      Age,\n      breaks = c(seq(0, 100, by = 5), Inf),\n      right = FALSE,\n      labels = c(paste(seq(0, 95, 5), seq(4, 99, 5), sep = \"–\"), \"100+\")\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\n\n\nThe code prepares the dataset population_data for visualising a population pyramid by first converting the Age column to numeric format. It then categorises individual ages into 5-year intervals using the cut() function, creating a new variable AgeGroup with labels such as “0–4”, “5–9”, …, and “100+”. Any rows with missing AgeGroup values are filtered out. The data is then grouped by both AgeGroup and Sex, and the total population (Pop) within each group is calculated using summarise(). Finally, to enable the mirrored bar chart structure of a population pyramid, male population values are converted to negative using mutate() with an ifelse() condition. This transformation allows males to be displayed on the left and females on the right of the central axis in the plot.\n\n\n\n\nThe codeExplaination\n\n\n\npyramid_data_grouped &lt;- population_data %&gt;%\n  mutate(\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    AgeGroup = factor(AgeGroup, levels = c(\"Children\", \"Teenager\", \"Young Adult\", \n                                           \"Adult\", \"Middle-age\", \"Elderly\")),\n    Total_Pop_k = paste0(round(Total_Pop / 1000), \"k\")\n  )\n\n\n\nThe code involves transforming population data into a summarized form suitable for visualizing population distribution by broad age categories and sex. First, the Age variable is classified into six age groups—Children, Teenager, Young Adult, Adult, Middle-age, and Elderly—using logical conditions via the case_when() function. Any records with missing or undefined age groups are removed using filter(). The data is then grouped by both AgeGroup and Sex, and the total population for each group is calculated using summarise(). To ensure a consistent order in plots, the AgeGroup variable is converted to a factor with a specified level sequence. Finally, a new column Total_Pop_k is created to represent the total population in thousands, formatted with a “k” suffix for more concise labeling in visualizations."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "title": "Take Home Exercise 1",
    "section": "2.4 Dataset for visuallisation 2",
    "text": "2.4 Dataset for visuallisation 2\n\nThe codeExplaination\n\n\n\nplanning_area_population &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  mutate(Pop_thousands = Total_Pop / 1000)\n\n\n\nThe code groups the population_data by PA (Planning Area) and then uses summarise() to calculate the total population (Total_Pop) within each area by summing the Pop values. The .groups = \"drop\" argument ensures the resulting data frame is ungrouped for further processing. Next, it filters out any planning areas with a total population of zero to maintain clarity in the visualization. Finally, the code introduces a new variable, Pop_thousands, by dividing the total population by 1,000 to express values in thousands.\n\n\n\n\nThe codeExplaination\n\n\n\npopulation_age_group_top20 &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  group_by(AgeGroup) %&gt;%\n  slice_max(order_by = Total_Pop, n = 20) %&gt;%\n  ungroup()\n\n\n\nThe code prepares a dataset to visualize the top 20 planning areas in Singapore by population across different age groups. It begins by converting the Age variable to a numeric format and classifying individuals into custom age groups such as “Children,” “Teenager,” “Young Adult,” “Adult,” “Middle-age,” and “Elderly” using the case_when() function. Rows with undefined age groups are removed using filter(). The data is then grouped by PA (Planning Area) and AgeGroup, and the total population for each group is calculated using summarise(). After filtering out planning areas with zero population, the code selects the top 20 planning areas per age group based on total population using slice_max(). Finally, ungroup() is applied to prepare the data for plotting."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "title": "Take Home Exercise 1",
    "section": "2.5 Dataset for visuallisation 3",
    "text": "2.5 Dataset for visuallisation 3\n\nThe codeExplaination\n\n\n\nviolin_data &lt;- population_data %&gt;%\n  mutate(Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age), !is.na(PA)) %&gt;%\n  group_by(PA, Age) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  uncount(weights = Pop)\n\ntop10_PAs &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PA)\n\nviolin_filtered &lt;- violin_data %&gt;%\n  filter(PA %in% top10_PAs) %&gt;%\n  mutate(PA = factor(PA, levels = top10_PAs))\n\n\n\nThe code first converts the Age column to numeric and drops any rows where either age or planning‐area (PA) is missing. It then groups by each unique combination of PA and Age and sums the population counts (Pop) to get an aggregated tally for each age cohort within each area. The uncount() step “explodes” these tallies back into individual rows—so each row now represents one person’s age and planning area—producing a long‐form dataset ideal for violin‐plotting. Separately, it identifies the ten most populous planning areas by summing Pop in the original data, sorting descending, and pulling out the top ten area names into top10_PAs. Finally, it filters the expanded violin_data to only those ten areas and redefines PA as a factor ordered according to population rank.\n\n\n\n\nThe codeExplaination\n\n\n\ntop20_PAs &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 20) %&gt;%\n  pull(PA)\n\npa_summary20 &lt;- violin_data %&gt;%\n  filter(PA %in% top20_PAs) %&gt;%\n  mutate(AgeGroup = if_else(Age &gt; 65, \"Elderly\", \"Other\")) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Avg_Age      = mean(Age),\n    Total_Pop    = n(),\n    Elderly_Prop = mean(AgeGroup == \"Elderly\"),\n    .groups      = \"drop\"\n  )\n\n\n\nThe code identifies the twenty planning areas with the largest populations by grouping the original population_data by PA, summing the Pop counts to compute each area’s total population, sorting those totals in descending order, and then taking the first twenty PA values into a vector called top20_PAs. Next, it builds pa_summary20 by filtering the expanded violin_data to only those twenty areas and creating a new categorical variable AgeGroup which labels individuals older than 65 as “Elderly” and everyone else as “Other.” Finally, it groups this subset by PA and computes three key summary statistics for each area: the mean age (Avg_Age), the total number of observations (Total_Pop, effectively the population count in the sample), and the proportion of residents classified as elderly (Elderly_Prop)."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "title": "Take Home Exercise 1",
    "section": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex",
    "text": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Population Pyramid\np1 &lt;- ggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_col(width = 0.9, color = \"white\") +\n  geom_text(aes(label = comma(abs(Pop))),\n            position = position_stack(vjust = 0.5),\n            size = 2.8,\n            color = \"white\") +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population Pyramid of Singapore\",\n    x = \"Age Group (5-year bins)\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, hjust = 0.5),  # center title\n    axis.text = element_text(size = 9),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    legend.position = \"none\"\n  )\n\n# Age group bar chart\np2 &lt;- ggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Total_Pop, fill = Sex)) +\n  geom_col(position = position_dodge(width = 0.9), width = 0.7) +\n  geom_text(aes(label = Total_Pop_k),\n            position = position_dodge(width = 0.9),\n            vjust = -0.3,\n            size = 3) +\n  scale_y_continuous(labels = label_number(scale = 1e-3, suffix = \"k\")) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population by Age Groups\",\n    x = \"Age Group\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text = element_text(size = 10),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),  # center title\n    legend.position = \"none\"\n  ) +\n  annotate(\"rect\", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, alpha = 0) +  # dummy to open up space\n  annotate(\"rect\", xmin = 0.5, xmax = 6.5, ymin = 700000, ymax = 800000, fill = NA) +\n  annotate(\"rect\", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, fill = NA) +\n  annotate(\"rect\", xmin = 2.15, xmax = 2.3, ymin = 430000, ymax = 440000, fill = \"#f768a1\", color = \"black\") +\n  annotate(\"text\", x = 2.45, y = 435000, label = \"Females\", hjust = 0, size = 3.5) +\n  annotate(\"rect\", xmin = 2.15, xmax = 2.3, ymin = 410000, ymax = 420000, fill = \"#3182bd\", color = \"black\") +\n  annotate(\"text\", x = 2.45, y = 415000, label = \"Males\", hjust = 0, size = 3.5)\n\n# Combine and caption\n(p1 | p2) +\n  plot_annotation(\n    caption = \"Age Group Ranges: Children: ≤12 | Teenager: 13–18 | Young Adult: 19–25 | Adult: 26–44 | Middle-age: 45–65 | Elderly: ≥65\",\n    theme = theme(plot.caption = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))\n  )\n\n\n\n\n\nInsight:\nThe population pyramid shows a mature demographic profile, with the largest cohorts in the 35–59 age range, reflecting Singapore’s aging trend. The base of the pyramid, representing children aged 0–14, is narrower, indicating lower birth rates in recent years. The gender distribution is generally balanced across age groups, with no major sex disparity observed.\nThe bar chart reinforces these patterns by grouping the population into broader age categories. The “Middle-age” (45–65) and “Adult” (26–44) segments together form the bulk of the population, representing the current and near-future workforce. Meanwhile, the “Children” and “Teenager” groups are comparatively smaller, signaling future challenges in population replacement. The significant size of the “Elderly” group (65+) emphasizes the rising demand for healthcare, eldercare, and retirement resources.\nThese visuals together highlight the pressing need for strategic planning in workforce sustainability, social infrastructure, and support systems to address Singapore’s shifting age structure."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "title": "Take Home Exercise 1",
    "section": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group",
    "text": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Treemap plot\np1 &lt;- ggplot(planning_area_population, aes(area = Pop_thousands, label = PA, fill = Pop_thousands)) +\n  geom_treemap() +\n  geom_treemap_text(\n    colour = \"black\",\n    place = \"centre\",\n    reflow = TRUE,\n    size = 12\n  ) +\n  scale_fill_viridis_c(option = \"D\", labels = scales::comma_format(suffix = \"k\")) +\n  labs(\n    title = \"Treemap of Total Population by Planning Area (in Thousands)\",\n    fill = \"Population (thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    legend.position = \"bottom\"\n  )\n\n# Bar plot\np2 &lt;- ggplot(population_age_group_top20, aes(x = reorder_within(PA, Total_Pop, AgeGroup), y = Total_Pop, fill = AgeGroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ AgeGroup, scales = \"free\") +\n  scale_x_reordered() +\n  coord_flip() +\n  labs(\n    title = \"Top 20 Planning Areas by Age Group Population\",\n    x = \"Planning Area\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 16),\n    axis.text.y = element_text(size = 10),\n    plot.title = element_text(face = \"bold\", size = 18)\n  )\n\n# combine both plots\np1 / p2 + plot_layout(heights = c(1, 2))\n\n\n\n\n\nInsight:\nThe treemap provides a high-level view of the total population across planning areas, showing that Tampines, Bedok, Sengkang, and Jurong West are the most densely populated regions in Singapore. These areas dominate in population size, occupying larger blocks and warmer color tones.\nThe bar charts below offer a breakdown by age group, revealing nuanced patterns: Tampines and Sengkang consistently rank high across most age groups, especially for adults and children, suggesting a family-oriented residential profile. In contrast, areas like Bedok have a significantly larger elderly population, while Woodlands stands out in the young adult category.\nThe variation across age groups highlights the differing demographic compositions of planning areas, which can inform planning for schools, eldercare, housing, and transportation needs."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---demographic-structure-and-aging-patterns-in-singapores-top-residential-planning-areas",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---demographic-structure-and-aging-patterns-in-singapores-top-residential-planning-areas",
    "title": "Take Home Exercise 1",
    "section": "3.3 Visuallisation 3 - Demographic Structure and Aging Patterns in Singapore’s Top Residential Planning Areas",
    "text": "3.3 Visuallisation 3 - Demographic Structure and Aging Patterns in Singapore’s Top Residential Planning Areas\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# palette for all 20 PAs\narea_colors_all &lt;- colorRampPalette(\n  RColorBrewer::brewer.pal(10, \"Set3\")\n)(20)\nnames(area_colors_all) &lt;- top20_PAs\n\n# Violin plot\np1 &lt;- ggplot(violin_filtered, aes(x = PA, y = Age, fill = PA)) +\n  geom_violin(trim = FALSE, scale = \"area\", width = 0.8, alpha = 0.7) +\n  geom_boxplot(width = 0.1, outlier.shape = NA, color = \"black\") +\n  scale_fill_manual(values = area_colors_all[top10_PAs]) +\n  labs(\n    title = \"Age Distribution by Planning Area (Top 10 Residential Areas)\",\n    x     = \"Planning Area\",\n    y     = \"Age\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    axis.text.x     = element_text(angle = 45, hjust = 1),\n    axis.title      = element_text(size = 16),\n    plot.title      = element_text(face = \"bold\", size = 18)\n  )\n\n# Scatter plot\np2 &lt;- ggplot(pa_summary20, aes(\n      x = Total_Pop,\n      y = Avg_Age,\n      size = Elderly_Prop,\n      fill = PA\n    )) +\n  geom_point(shape = 21, alpha = 0.8, color = \"black\") +\n  geom_text_repel(aes(label = PA), size = 4, max.overlaps = 30) +\n  \n  scale_fill_manual(values = area_colors_all, guide = FALSE) +\n  scale_size_continuous(\n    name  = \"Elderly Proportion\",\n    range = c(6, 20)\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  labs(\n    title = \"Average Age vs. Total Population (Top 20 Planning Areas)\",\n    x     = \"Total Population\",\n    y     = \"Average Age\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"right\",\n    legend.title    = element_text(size = 14),\n    legend.text     = element_text(size = 12),\n    axis.title      = element_text(size = 16),\n    plot.title      = element_text(face = \"bold\", size = 18)\n  )\n\n# combine\n(p2 / p1) + plot_layout(heights = c(1, 0.6))\n\n\n\n\n\nInsight:\nOn the scatterplot, total population per PA ranges from approximately 90,000 in Sembawang to about 275,000 in Bedok and Tampines. Average ages vary between 36 years in Punggol and 46 years in Ang Mo Kio, with intermediate mean ages (≈38–45) in other PAs. Bubble sizes indicate elderly proportion: Ang Mo Kio (~20 %) and Bukit Merah (~18 %) have the largest shares, while Sembawang and Punggol register the smallest (~12 %).\nIn the violin plots for the top ten PAs, median ages are clustered between roughly 35 and 45 years; the interquartile ranges span about 20–30 years. Bedok and Hougang violins have wide upper distributions—indicating substantial populations over 60—while Punggol’s shape is narrowly concentrated between 20 and 40. Medians appear highest in Bukit Batok and Sengkang and lowest in Punggol and Choa Chu Kang."
  }
]