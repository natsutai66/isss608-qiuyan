[
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "In this exercise, we set out to determine whether Nadia Conti remains an active coordinator of illicit reef exploitation in Oceanus by mining and visualizing a two-week corpus of radio intercepts, surveillance logs, and permit metadata from the MC3 knowledge graph. After loading and cleaning the raw JSON data into tidy node and edge tables, we built a tidygraph object and examined Nadia’s two-hop ego network through both static and interactive layouts. We then computed normalized betweenness separately on the “Event” and “Relationship” subgraphs to spotlight which communications and ties most heavily bridge Nadia to the wider conspiracy. Finally, we constructed both a detailed static timeline and an interactive ggplotly timeline—annotated with confirmed‐illegal (“triangle”) versus suspicious (“dot”) events—to trace the temporal escalation from an unauthorized Nemo Reef permit on October 5, 2040, through bribery with Liam Thorne on October 9, and covert payments on October 10. By combining these layered views, the analysis paints a multidimensional portrait of Nadia’s dual role as information conduit and conspiracy facilitator."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 2",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\nFive R packages will be used. They are tidyverse, jsonlite, tidygraph, ggraph and SmartEDA.\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environemnt.\n\npacman::p_load(tidyverse, jsonlite, tidygraph, dplyr, stringr, \n               ggraph, ggrepel, SmartEDA, visNetwork, ggplot2, \n               timevis, lubridate, plotly)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#importing-knowledge-graph-data",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#importing-knowledge-graph-data",
    "title": "Take Home Exercise 2",
    "section": "2.2 Importing Knowledge Graph Data",
    "text": "2.2 Importing Knowledge Graph Data\nIn the code chunk below, fromJSON() of jsonlite package is used to import mc3.json file into R and save the output object.\n\nMC3 &lt;- fromJSON(\"data/MC3_graph.json\")\nMC3_schema &lt;- fromJSON(\"data/MC3_schema.json\")\n\n\nInspecting knowledge graph structure\nIn the code chunk below glimpse() is used to reveal the structure of mc3 knowledge graph.\n\nThe codeThe output\n\n\n\nglimpse(MC3)\n\n\n\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ..."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#initial-eda",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#initial-eda",
    "title": "Take Home Exercise 2",
    "section": "Initial EDA",
    "text": "Initial EDA\nIn the code chunk below, ExpCatViz() of SmartEDA package is used to reveal the frequency distribution of all categorical fields in mc3_nodes tibble dataframe.\n\nThe codeThe plot\n\n\n\nExpCatViz(data=mc3_nodes,\n          col=\"lightblue\")\n\n\n\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below uses ExpCATViz() of SmartEDA package to reveal the frequency distribution of all categorical fields in mc3_edges tibble dataframe.\n\nThe codeThe plot\n\n\n\nExpCatViz(data=mc3_edges,\n          col=\"lightblue\")\n\n\n\n\n\n[[1]]"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#cleaning-and-wrangling-nodes",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#cleaning-and-wrangling-nodes",
    "title": "Take Home Exercise 2",
    "section": "4.1 Cleaning and wrangling nodes",
    "text": "4.1 Cleaning and wrangling nodes\nCode chunk below performs the following data cleaning tasks:\n\nconvert values in id field into character data type,\nexclude records with id value are na,\nexclude records with similar id values,\nexclude thing_collected field, and\nsave the cleaned tibble dataframe into a new tibble datatable called mc3_nodes_cleaned.\n\n\nmc3_nodes_cleaned &lt;- mc3_nodes %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#cleaning-and-wrangling-edges",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#cleaning-and-wrangling-edges",
    "title": "Take Home Exercise 2",
    "section": "4.2 Cleaning and wrangling edges",
    "text": "4.2 Cleaning and wrangling edges\nThe code chunk below will be used to:\n\nrename source and target fields to from_id and to_id respectively,\nconvert values in from_id and to_id fields to character data type,\nexclude values in from_id and to_id which not found in the id field of mc3_nodes_cleaned,\nexclude records whereby from_id and/or to_id values are missing, and\nsave the cleaned tibble dataframe and called it mc3_edges_cleaned.\n\n\nmc3_edges_cleaned &lt;- mc3_edges %&gt;%\n  rename(from_id = source, \n         to_id = target) %&gt;%\n  mutate(across(c(from_id, to_id), \n                as.character)) %&gt;%\n  filter(from_id %in% mc3_nodes_cleaned$id, \n         to_id %in% mc3_nodes_cleaned$id) %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\nThe code chunk below will be used to create mapping of character id in mc3_nodes_cleaned to row index\n\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\nThe code chunk below will be used to join and convert from_id and to_id to integer indices. At the same time we also drop rows with unmatched nodes.\n\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, \n            by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, \n            by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  select(from, to, is_inferred, type) %&gt;%\n  filter(!is.na(from) & !is.na(to))  \n\nThe code chunk below is used to subset nodes to only those referenced by edges.\n\nused_node_indices &lt;- sort(\n  unique(c(mc3_edges_indexed$from, \n           mc3_edges_indexed$to)))\n\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\nThe code chunk below will be used to rebuild lookup from old index to new index.\n\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(\n    used_node_indices))\n\nThe code chunk below will be used to update edge indices to match new node table.\n\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, \n            by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, \n            by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  select(from = from_new, to = to_new, \n         is_inferred, type)"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#timeline-of-key-events-involving-nadia-conti",
    "href": "TakeHome_Ex/TakeHome_Ex02/TakeHome_Ex02.html#timeline-of-key-events-involving-nadia-conti",
    "title": "Take Home Exercise 2",
    "section": "8 Timeline of Key Events Involving Nadia Conti",
    "text": "8 Timeline of Key Events Involving Nadia Conti\nThe timeline highlights both confirmed illegal actions and inferred or suspicious interactions based on edge and node attributes linked to Nadia’s two-hop ego network. The visual categorizes the events on the y-axis by type—AccessPermission, Bribery, Communication, Coordination, and Payment—and plots them chronologically along the x-axis spanning from October 5 to October 14, 2040.\nConfirmed illegal events are denoted by triangle-shaped points, while inferred or suspicious activities are shown as dots. The color of each point corresponds to the type of event. Notably, on October 5, the timeline displays a red triangle for “Nemo Reef,” representing Nadia’s unauthorized granting of a special access permit to the location. This event is a pivotal starting point of the illegal operation, as reconstructed through surrounding relationship and communication data. On October 9, an orange triangle labeled “Liam Thorne” reflects a confirmed bribery act, inferred from intercepted communication suggesting illicit payment arrangements. Another significant illegal activity is a purple triangle labeled “Elise” on October 10, which denotes a payment transaction believed to support the logistics of the reef exploitation.\nThroughout the timeline, there is a dense cluster of blue communication events, all linked to various individuals and entities such as Davis, Elise, Neptune, V. Miesel Shipping, and Oceanus City Council. These communications, although not all individually confirmed as illegal, collectively illustrate a network of frequent contact and coordination—suggesting the existence of a highly active and synchronized operation. Davis appears multiple times across different event types, highlighting his central role as both a recipient of communications and a participant in coordination efforts.\nAdditional green points on October 9 and 14, labeled “Davis,” represent coordination events that likely indicate planning or cover-up activities following the initial illegal exploitation. These events, while marked as inferred, align closely with the sequence of confirmed acts and underscore the strategic timing of operational logistics.\nThe timeline reveals a clear temporal structure and escalation pattern in Nadia’s actions—from initiation, through execution, to coordination—cementing her role as the central orchestrator of a multi-entity illegal conspiracy. The timeline not only validates the known events but also uncovers patterns of engagement that can support further investigation or legal scrutiny.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnadia_id &lt;- mc3_nodes_final %&gt;%\n  filter(name == \"Nadia Conti\") %&gt;%\n  pull(new_index)\n\nedges_involving_nadia &lt;- mc3_edges_final %&gt;%\n  filter(from == nadia_id | to == nadia_id)\n\nnadia_event_indices &lt;- edges_involving_nadia %&gt;%\n  mutate(event_index = if_else(from == nadia_id, to, from)) %&gt;%\n  distinct(event_index) %&gt;%\n  pull(event_index)\n\nnadia_events &lt;- mc3_nodes_final %&gt;%\n  slice(nadia_event_indices) %&gt;%\n  filter(type == \"Event\") %&gt;%\n  mutate(timestamp = ymd_hms(timestamp)) %&gt;%\n  arrange(timestamp)\n\nget_partner_name &lt;- function(event_index) {\n  edges &lt;- mc3_edges_final %&gt;%\n    filter((from == event_index & to != nadia_id) |\n           (to == event_index & from != nadia_id))\n  partners_idx &lt;- unique(c(edges$from, edges$to))\n  partners_idx &lt;- partners_idx[partners_idx != nadia_id & partners_idx != event_index]\n  if (length(partners_idx) == 0) return(NA)\n  partners &lt;- mc3_nodes_final %&gt;%\n    filter(new_index %in% partners_idx, type == \"Entity\") %&gt;%\n    mutate(priority = case_when(\n      sub_type == \"Person\" ~ 1,\n      sub_type == \"Organization\" ~ 2,\n      sub_type == \"Group\" ~ 3,\n      sub_type == \"Vessel\" ~ 4,\n      sub_type == \"Location\" ~ 5,\n      TRUE ~ 6\n    )) %&gt;%\n    arrange(priority)\n  return(partners$name[1])\n}\n\nnadia_events &lt;- nadia_events %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    partner = get_partner_name(new_index),\n    inferred = {\n      any_edge &lt;- edges_involving_nadia %&gt;%\n        filter((from == nadia_id & to == new_index) |\n               (to == nadia_id & from == new_index))\n      if (nrow(any_edge) &gt; 0) any_edge$is_inferred[1] else FALSE\n    }\n  ) %&gt;%\n  ungroup()\n\nnadia_events &lt;- nadia_events %&gt;%\n  add_row(\n    id = \"Rel_AccessPermit_NemoReef\", \n    timestamp = ymd_hms(\"2040-10-05 00:00:00\"),\n    sub_type = \"AccessPermission\", \n    name = NA, content = NA, partner = \"Nemo Reef\", inferred = TRUE\n  ) %&gt;%\n  add_row(\n    id = \"Rel_Payment_Elise\", \n    timestamp = ymd_hms(\"2040-10-10 05:00:00\"),\n    sub_type = \"Payment\", \n    name = NA, content = NA, partner = \"Elise\", inferred = TRUE\n  )\n\ntimeline_df &lt;- nadia_events %&gt;%\n  mutate(\n    event_type = case_when(\n      sub_type == \"AccessPermission\" ~ \"AccessPermission\",\n      sub_type == \"Payment\" ~ \"Payment\",\n      sub_type == \"Communication\" & str_detect(content %||% \"\", regex(\"Double .* fee\", ignore_case=TRUE)) ~ \"Bribery\",\n      TRUE ~ sub_type\n    ),\n    event_type = if_else(event_type == \"Collaborate\", \"Coordination\", event_type),\n    confirmed_flag = if_else(event_type %in% c(\"AccessPermission\",\"Bribery\",\"Payment\"), \n                             \"Confirmed Illegal\", \"Inferred/Suspicious\"),\n    label_text = partner\n  )\n\n#Plot\nggplot(timeline_df, aes(x = timestamp, y = event_type)) +\n  annotate(\"rect\", xmin = as.POSIXct(\"2040-10-05\"), xmax = as.POSIXct(\"2040-10-15\"),\n           ymin = -Inf, ymax = Inf, fill = \"gray90\", alpha = 0.3) +\n  geom_point(aes(color = event_type, shape = confirmed_flag), size = 3) +\n  geom_text_repel(\n    aes(label = label_text, color = event_type),\n    size = 3.4, box.padding = 0.4, max.overlaps = 30,\n    segment.color = \"gray70\", segment.size = 0.3,\n    min.segment.length = 0, force = 3.5\n  ) +\n  scale_color_manual(values = c(\n    \"AccessPermission\" = \"#d73027\",\n    \"Bribery\"          = \"#e69138\",\n    \"Payment\"          = \"#88419d\",\n    \"Communication\"    = \"#2c7bb6\",\n    \"Coordination\"     = \"#1a9850\"\n  )) +\n  scale_shape_manual(values = c(\"Confirmed Illegal\" = 17, \"Inferred/Suspicious\" = 16)) +\n  labs(\n    title = \"Timeline of Events Involving Nadia Conti (Oct 2040)\",\n    x = \"Date/Time\", y = NULL,\n    shape = \"Event Category\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major.y = element_line(color = \"gray90\"),\n    panel.grid.minor = element_blank(),\n    axis.text.y = element_text(size = 11),\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    legend.position = \"bottom\",\n    legend.box = \"horizontal\",\n    legend.title.align = 0.5\n  ) +\n  guides(\n    color = \"none\", \n    shape = guide_legend(title.position = \"top\", title.hjust = 0.5, nrow = 1)\n  )\n\n\n\n\n\nInteractive Timeline of Nadia Conti’s Activities\nThe interactive timeline includes hoverable tooltips that display detailed metadata for each event—including the event type, partner name, confirmation status, exact timestamp, and the associated evidence text.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nnadia_id &lt;- mc3_nodes_final %&gt;%\n  filter(name == \"Nadia Conti\") %&gt;%\n  pull(new_index)\n\nedges_involving_nadia &lt;- mc3_edges_final %&gt;%\n  filter(from == nadia_id | to == nadia_id)\n\nnadia_event_indices &lt;- edges_involving_nadia %&gt;%\n  mutate(event_index = if_else(from == nadia_id, to, from)) %&gt;%\n  distinct(event_index) %&gt;%\n  pull(event_index)\n\nnadia_events &lt;- mc3_nodes_final %&gt;%\n  slice(nadia_event_indices) %&gt;%\n  filter(type == \"Event\") %&gt;%\n  mutate(timestamp = ymd_hms(timestamp)) %&gt;%\n  arrange(timestamp)\n\nget_partner_name &lt;- function(event_index) {\n  edges &lt;- mc3_edges_final %&gt;%\n    filter((from == event_index & to != nadia_id) |\n           (to   == event_index & from != nadia_id))\n  partners_idx &lt;- unique(c(edges$from, edges$to))\n  partners_idx &lt;- setdiff(partners_idx, c(nadia_id, event_index))\n  if (length(partners_idx) == 0) return(NA)\n  mc3_nodes_final %&gt;%\n    filter(new_index %in% partners_idx, type == \"Entity\") %&gt;%\n    mutate(priority = case_when(\n      sub_type == \"Person\"       ~ 1,\n      sub_type == \"Organization\" ~ 2,\n      sub_type == \"Group\"        ~ 3,\n      sub_type == \"Vessel\"       ~ 4,\n      sub_type == \"Location\"     ~ 5,\n      TRUE                       ~ 6\n    )) %&gt;%\n    arrange(priority) %&gt;%\n    pull(name) %&gt;%\n    first()\n}\n\nnadia_events &lt;- nadia_events %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    partner = get_partner_name(new_index),\n    inferred = {\n      e &lt;- edges_involving_nadia %&gt;%\n        filter((from == nadia_id & to == new_index) |\n               (to   == nadia_id & from == new_index))\n      if (nrow(e) &gt; 0) e$is_inferred[1] else FALSE\n    }\n  ) %&gt;%\n  ungroup()\n\nnadia_events &lt;- nadia_events %&gt;%\n  add_row(\n    id        = \"Rel_AccessPermit_NemoReef\",\n    timestamp = ymd_hms(\"2040-10-05 00:00:00\"),\n    sub_type  = \"AccessPermission\",\n    name      = NA,\n    content   = \"Special permit granted to Nemo Reef outside formal review process\",\n    partner   = \"Nemo Reef\",\n    inferred  = TRUE\n  ) %&gt;%\n  add_row(\n    id        = \"Rel_Payment_Elise\",\n    timestamp = ymd_hms(\"2040-10-10 05:00:00\"),\n    sub_type  = \"Payment\",\n    name      = NA,\n    content   = \"Covert funding for illegal reef operation provided by Elise\",\n    partner   = \"Elise\",\n    inferred  = TRUE\n  )\n\nevent_colors &lt;- c(\n  AccessPermission = \"#d73027\",\n  Bribery          = \"#e69138\",\n  Payment          = \"#88419d\",\n  Communication    = \"#2c7bb6\",\n  Coordination     = \"#1a9850\"\n)\nwrap_text &lt;- function(text, width = 80) {\n  sapply(strwrap(text, width = width, simplify = FALSE),\n         function(x) paste(x, collapse = \"&lt;br&gt;\"))\n}\n\nlevels &lt;- c(\"AccessPermission\", \"Bribery\", \"Communication\", \"Coordination\", \"Payment\")\ntimeline_df &lt;- nadia_events %&gt;%\n  mutate(\n    event_type = case_when(\n      sub_type == \"AccessPermission\" ~ \"AccessPermission\",\n      sub_type == \"Payment\"          ~ \"Payment\",\n      sub_type == \"Communication\" & str_detect(content %||% \"\",\n        regex(\"Double .* fee\", ignore_case = TRUE)) ~ \"Bribery\",\n      TRUE ~ sub_type\n    ),\n    event_type     = if_else(event_type == \"Collaborate\", \"Coordination\", event_type),\n    confirmed_flag = if_else(event_type %in% c(\"AccessPermission\",\"Bribery\",\"Payment\"),\n                             \"Confirmed Illegal\", \"Inferred/Suspicious\"),\n    wrapped_evidence = ifelse(!is.na(content), wrap_text(content, 80), \"\"),\n    tooltip = paste0(\n      \"&lt;b&gt;Event Type:&lt;/b&gt; \", event_type, \"&lt;br&gt;\",\n      \"&lt;b&gt;Partner:&lt;/b&gt; \", partner, \"&lt;br&gt;\",\n      \"&lt;b&gt;Confirmed:&lt;/b&gt; \", confirmed_flag, \"&lt;br&gt;\",\n      \"&lt;b&gt;Timestamp:&lt;/b&gt; \", format(timestamp, \"%Y-%m-%d %H:%M\"),\n      if_else(wrapped_evidence != \"\",\n              paste0(\"&lt;br&gt;&lt;b&gt;Evidence:&lt;/b&gt; \", wrapped_evidence), \"\")\n    ),\n    y_base   = as.numeric(factor(event_type, levels = levels)),\n    hour_grp = if_else(event_type == \"Communication\",\n                       floor_date(timestamp, \"hour\"),\n                       as.POSIXct(NA))\n  ) %&gt;%\n  group_by(event_type, hour_grp) %&gt;%\n  mutate(\n    idx      = if_else(event_type == \"Communication\", row_number(), NA_integer_),\n    n_comm   = if_else(event_type == \"Communication\", n(), NA_integer_),\n    offset   = if_else(event_type == \"Communication\",\n                       (idx - (n_comm + 1) / 2) * 0.20,\n                       0),\n    y_jitter = y_base + offset\n  ) %&gt;%\n  ungroup()\n\np &lt;- ggplot() +\n  annotate(\"rect\",\n           xmin = as.POSIXct(\"2040-10-05\"),\n           xmax = as.POSIXct(\"2040-10-13\"),\n           ymin = -Inf, ymax = Inf,\n           fill = \"gray90\", alpha = 0.3) +\n  geom_point(\n    data = filter(timeline_df, event_type != \"Communication\"),\n    aes(x = timestamp, y = y_jitter,\n        color = event_type, shape = confirmed_flag, text = tooltip),\n    size = 3\n  ) +\n  geom_text_repel(\n    data = filter(timeline_df, event_type != \"Communication\"),\n    aes(x = timestamp, y = y_jitter, label = partner),\n    size = 3, box.padding = 0.4, segment.color = \"gray70\",\n    segment.size = 0.3, force = 3\n  ) +\n  geom_point(\n    data = filter(timeline_df, event_type == \"Communication\"),\n    aes(x = timestamp, y = y_jitter,\n        color = event_type, shape = confirmed_flag, text = tooltip),\n    size = 2, alpha = 0.6\n  ) +\n  scale_y_continuous(\n    breaks = seq_along(levels),\n    labels = levels,\n    name   = NULL\n  ) +\n  scale_color_manual(values = event_colors) +\n  scale_shape_manual(values = c(\"Confirmed Illegal\" = 17,\n                                \"Inferred/Suspicious\" = 16)) +\n  labs(\n    title = \"Interactive Timeline of Nadia Conti’s Activities\",\n    x     = NULL      \n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    axis.title.y       = element_blank(),\n    axis.title.x       = element_blank(),                  \n    axis.text.y        = element_text(size = 11),\n    axis.text.x        = element_text(size = 12),\n    panel.grid.major.y = element_line(color = \"gray90\"),\n    panel.grid.minor   = element_blank(),\n    plot.title         = element_text(\n                           face   = \"bold\",\n                           size   = 12,\n                           hjust  = 0.5,\n                           margin = margin(b = 10)     \n                         ),\n    plot.margin        = margin(t = 40, r = 20, b = 0, l = 0),\n    legend.position    = \"none\"\n  )\n\nggplotly(p, tooltip = \"text\") %&gt;%\n  layout(\n    showlegend = FALSE,\n    yaxis      = list(title = \"\")\n  )"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "This exercise delivers three static analytical visualisations and concise commentaries that explain the demographic structure and geographic distribution of Singapore residents in June 2024. Using the “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex” dataset from the Department of Statistics, the data were wrangled entirely with the tidyverse and visualised with ggplot2 and its extensions, adhering to the exercise requirement for reproducible R code and non‑interactive graphics.\n\nNation‑wide age profile – a population pyramid and companion bar chart depict gender balance, cohort sizes, and the dominance of the 26‑65 workforce alongside a contracting youth base and expanding senior segment.\nSpatial distribution – a treemap ranks planning areas by total residents, while six faceted bar charts rank them within each major age group, revealing contrasts such as Tampines’ family orientation versus Bedok’s larger elderly share.\nAge‑structure contrasts – a bubble plot (average age vs population, bubble = senior share) and violin plots of the ten largest areas detail how mean age and intra‑area distributions vary, pinpointing estates like Ang Mo Kio (oldest) and Punggol (youngest).\n\nTogether these visuals provide a foundation for evidence‑based recommendations on schooling capacity, eldercare facilities, housing typology, and transport planning across Singapore’s diverse neighbourhoods."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 1",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\n\nThe codeThe libraries\n\n\n\npacman::p_load(scales, ggrepel, patchwork, \n               ggthemes, hrbrthemes,tidyverse, \n               tidytext,treemapify) \n\n\n\n\n\n\n\n\n\n\nname\npurpose\n\n\n\n\nscales\nNicely formats axis ticks and legends.\n\n\nggrepel\nAdds non‑overlapping text labels to ggplots.\n\n\npatchwork\nCombines multiple ggplots into a single figure.\n\n\nggthemes\nSupplies predefined aesthetic themes.\n\n\nhrbrthemes\nExtends ggthemes with modern, typographically friendly themes and font support.\n\n\ntidyverse\nMeta‑package that loads ggplot2, dplyr, tidyr, readr, stringr, forcats, etc. — the backbone for data import, transformation, and visualisation.\n\n\ntidytext\nTokenises and analyses text.\n\n\ntreemapify\nCreates ggplot‑compatible treemaps."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#importing-dataset",
    "title": "Take Home Exercise 1",
    "section": "2.2 Importing dataset",
    "text": "2.2 Importing dataset\n\nThe codeExplaination\n\n\n\npopulation_data &lt;- read_csv(\"respopagesex2024.csv\") %&gt;%\n  mutate(Age = as.numeric(Age))\n\nglimpse(population_data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 1…\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\nThe code imports the dataset respopagesex2024.csv and load the CSV file into a dataframe named population_data.\nAfter import, the mutate() function is applied to convert the Age column from character to numeric format.\nLastly, the glimpse() function provides a concise overview of the dataset’s structure, displaying column names, data types, and sample values."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-1",
    "title": "Take Home Exercise 1",
    "section": "2.3 Dataset for visuallisation 1",
    "text": "2.3 Dataset for visuallisation 1\n\nThe codeExplaination\n\n\n\npyramid_data &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = cut(\n      Age,\n      breaks = c(seq(0, 100, by = 5), Inf),\n      right = FALSE,\n      labels = c(paste(seq(0, 95, 5), seq(4, 99, 5), sep = \"–\"), \"100+\")\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\n\n\nThe code prepares the dataset population_data for visualising a population pyramid by first converting the Age column to numeric format. It then categorises individual ages into 5-year intervals using the cut() function, creating a new variable AgeGroup with labels such as “0–4”, “5–9”, …, and “100+”. Any rows with missing AgeGroup values are filtered out. The data is then grouped by both AgeGroup and Sex, and the total population (Pop) within each group is calculated using summarise(). Finally, to enable the mirrored bar chart structure of a population pyramid, male population values are converted to negative using mutate() with an ifelse() condition. This transformation allows males to be displayed on the left and females on the right of the central axis in the plot.\n\n\n\n\nThe codeExplaination\n\n\n\npyramid_data_grouped &lt;- population_data %&gt;%\n  mutate(\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    AgeGroup = factor(AgeGroup, levels = c(\"Children\", \"Teenager\", \"Young Adult\", \n                                           \"Adult\", \"Middle-age\", \"Elderly\")),\n    Total_Pop_k = paste0(round(Total_Pop / 1000), \"k\")\n  )\n\n\n\nThe code involves transforming population data into a summarized form suitable for visualizing population distribution by broad age categories and sex. First, the Age variable is classified into six age groups—Children, Teenager, Young Adult, Adult, Middle-age, and Elderly—using logical conditions via the case_when() function. Any records with missing or undefined age groups are removed using filter(). The data is then grouped by both AgeGroup and Sex, and the total population for each group is calculated using summarise(). To ensure a consistent order in plots, the AgeGroup variable is converted to a factor with a specified level sequence. Finally, a new column Total_Pop_k is created to represent the total population in thousands, formatted with a “k” suffix for more concise labeling in visualizations."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-2",
    "title": "Take Home Exercise 1",
    "section": "2.4 Dataset for visuallisation 2",
    "text": "2.4 Dataset for visuallisation 2\n\nThe codeExplaination\n\n\n\nplanning_area_population &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  mutate(Pop_thousands = Total_Pop / 1000)\n\n\n\nThe code groups the population_data by PA (Planning Area) and then uses summarise() to calculate the total population (Total_Pop) within each area by summing the Pop values. The .groups = \"drop\" argument ensures the resulting data frame is ungrouped for further processing. Next, it filters out any planning areas with a total population of zero to maintain clarity in the visualization. Finally, the code introduces a new variable, Pop_thousands, by dividing the total population by 1,000 to express values in thousands.\n\n\n\n\nThe codeExplaination\n\n\n\npopulation_age_group_top20 &lt;- population_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = case_when(\n      Age &lt;= 12 ~ \"Children\",\n      Age &gt;= 13 & Age &lt;= 18 ~ \"Teenager\",\n      Age &gt; 18 & Age &lt;= 25 ~ \"Young Adult\",\n      Age &gt;= 26 & Age &lt;= 44 ~ \"Adult\",\n      Age &gt;= 45 & Age &lt;= 65 ~ \"Middle-age\",\n      Age &gt; 65 ~ \"Elderly\"\n    )\n  ) %&gt;%\n  filter(!is.na(AgeGroup)) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 0) %&gt;%\n  group_by(AgeGroup) %&gt;%\n  slice_max(order_by = Total_Pop, n = 20) %&gt;%\n  ungroup()\n\n\n\nThe code prepares a dataset to visualize the top 20 planning areas in Singapore by population across different age groups. It begins by converting the Age variable to a numeric format and classifying individuals into custom age groups such as “Children,” “Teenager,” “Young Adult,” “Adult,” “Middle-age,” and “Elderly” using the case_when() function. Rows with undefined age groups are removed using filter(). The data is then grouped by PA (Planning Area) and AgeGroup, and the total population for each group is calculated using summarise(). After filtering out planning areas with zero population, the code selects the top 20 planning areas per age group based on total population using slice_max(). Finally, ungroup() is applied to prepare the data for plotting."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#dataset-for-visuallisation-3",
    "title": "Take Home Exercise 1",
    "section": "2.5 Dataset for visuallisation 3",
    "text": "2.5 Dataset for visuallisation 3\n\nThe codeExplaination\n\n\n\nviolin_data &lt;- population_data %&gt;%\n  mutate(Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age), !is.na(PA)) %&gt;%\n  group_by(PA, Age) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  uncount(weights = Pop)\n\ntop10_PAs &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PA)\n\nviolin_filtered &lt;- violin_data %&gt;%\n  filter(PA %in% top10_PAs) %&gt;%\n  mutate(PA = factor(PA, levels = top10_PAs))\n\n\n\nThe code first converts the Age column to numeric and drops any rows where either age or planning‐area (PA) is missing. It then groups by each unique combination of PA and Age and sums the population counts (Pop) to get an aggregated tally for each age cohort within each area. The uncount() step “explodes” these tallies back into individual rows—so each row now represents one person’s age and planning area—producing a long‐form dataset ideal for violin‐plotting. Separately, it identifies the ten most populous planning areas by summing Pop in the original data, sorting descending, and pulling out the top ten area names into top10_PAs. Finally, it filters the expanded violin_data to only those ten areas and redefines PA as a factor ordered according to population rank.\n\n\n\n\nThe codeExplaination\n\n\n\ntop20_PAs &lt;- population_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 20) %&gt;%\n  pull(PA)\n\npa_summary20 &lt;- violin_data %&gt;%\n  filter(PA %in% top20_PAs) %&gt;%\n  mutate(AgeGroup = if_else(Age &gt; 65, \"Elderly\", \"Other\")) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Avg_Age      = mean(Age),\n    Total_Pop    = n(),\n    Elderly_Prop = mean(AgeGroup == \"Elderly\"),\n    .groups      = \"drop\"\n  )\n\n\n\nThe code identifies the twenty planning areas with the largest populations by grouping the original population_data by PA, summing the Pop counts to compute each area’s total population, sorting those totals in descending order, and then taking the first twenty PA values into a vector called top20_PAs. Next, it builds pa_summary20 by filtering the expanded violin_data to only those twenty areas and creating a new categorical variable AgeGroup which labels individuals older than 65 as “Elderly” and everyone else as “Other.” Finally, it groups this subset by PA and computes three key summary statistics for each area: the mean age (Avg_Age), the total number of observations (Total_Pop, effectively the population count in the sample), and the proportion of residents classified as elderly (Elderly_Prop)."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-1---demographic-structure-of-singapore-residents-by-age-and-sex",
    "title": "Take Home Exercise 1",
    "section": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex",
    "text": "3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Population Pyramid\np1 &lt;- ggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_col(width = 0.9, color = \"white\") +\n  geom_text(aes(label = comma(abs(Pop))),\n            position = position_stack(vjust = 0.5),\n            size = 2.8,\n            color = \"white\") +\n  coord_flip() +\n  scale_y_continuous(labels = function(x) comma(abs(x))) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population Pyramid of Singapore\",\n    x = \"Age Group (5-year bins)\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, hjust = 0.5),  # center title\n    axis.text = element_text(size = 9),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    legend.position = \"none\"\n  )\n\n# Age group bar chart\np2 &lt;- ggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Total_Pop, fill = Sex)) +\n  geom_col(position = position_dodge(width = 0.9), width = 0.7) +\n  geom_text(aes(label = Total_Pop_k),\n            position = position_dodge(width = 0.9),\n            vjust = -0.3,\n            size = 3) +\n  scale_y_continuous(labels = label_number(scale = 1e-3, suffix = \"k\")) +\n  scale_fill_manual(values = c(\"Males\" = \"#3182bd\", \"Females\" = \"#f768a1\")) +\n  labs(\n    title = \"Population by Age Groups\",\n    x = \"Age Group\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text = element_text(size = 10),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),  # center title\n    legend.position = \"none\"\n  ) +\n  annotate(\"rect\", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, alpha = 0) +  # dummy to open up space\n  annotate(\"rect\", xmin = 0.5, xmax = 6.5, ymin = 700000, ymax = 800000, fill = NA) +\n  annotate(\"rect\", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, fill = NA) +\n  annotate(\"rect\", xmin = 2.15, xmax = 2.3, ymin = 430000, ymax = 440000, fill = \"#f768a1\", color = \"black\") +\n  annotate(\"text\", x = 2.45, y = 435000, label = \"Females\", hjust = 0, size = 3.5) +\n  annotate(\"rect\", xmin = 2.15, xmax = 2.3, ymin = 410000, ymax = 420000, fill = \"#3182bd\", color = \"black\") +\n  annotate(\"text\", x = 2.45, y = 415000, label = \"Males\", hjust = 0, size = 3.5)\n\n# Combine and caption\n(p1 | p2) +\n  plot_annotation(\n    caption = \"Age Group Ranges: Children: ≤12 | Teenager: 13–18 | Young Adult: 19–25 | Adult: 26–44 | Middle-age: 45–65 | Elderly: ≥65\",\n    theme = theme(plot.caption = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))\n  )\n\n\n\n\n\nInsight:\nThe population pyramid shows a mature demographic profile, with the largest cohorts in the 35–59 age range, reflecting Singapore’s aging trend. The base of the pyramid, representing children aged 0–14, is narrower, indicating lower birth rates in recent years. The gender distribution is generally balanced across age groups, with no major sex disparity observed.\nThe bar chart reinforces these patterns by grouping the population into broader age categories. The “Middle-age” (45–65) and “Adult” (26–44) segments together form the bulk of the population, representing the current and near-future workforce. Meanwhile, the “Children” and “Teenager” groups are comparatively smaller, signaling future challenges in population replacement. The significant size of the “Elderly” group (65+) emphasizes the rising demand for healthcare, eldercare, and retirement resources.\nThese visuals together highlight the pressing need for strategic planning in workforce sustainability, social infrastructure, and support systems to address Singapore’s shifting age structure."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-2---overview-of-population-distribution-by-planning-area-and-age-group",
    "title": "Take Home Exercise 1",
    "section": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group",
    "text": "3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Treemap plot\np1 &lt;- ggplot(planning_area_population, aes(area = Pop_thousands, label = PA, fill = Pop_thousands)) +\n  geom_treemap() +\n  geom_treemap_text(\n    colour = \"black\",\n    place = \"centre\",\n    reflow = TRUE,\n    size = 12\n  ) +\n  scale_fill_viridis_c(option = \"D\", labels = scales::comma_format(suffix = \"k\")) +\n  labs(\n    title = \"Treemap of Total Population by Planning Area (in Thousands)\",\n    fill = \"Population (thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    legend.position = \"bottom\"\n  )\n\n# Bar plot\np2 &lt;- ggplot(population_age_group_top20, aes(x = reorder_within(PA, Total_Pop, AgeGroup), y = Total_Pop, fill = AgeGroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ AgeGroup, scales = \"free\") +\n  scale_x_reordered() +\n  coord_flip() +\n  labs(\n    title = \"Top 20 Planning Areas by Age Group Population\",\n    x = \"Planning Area\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 16),\n    axis.text.y = element_text(size = 10),\n    plot.title = element_text(face = \"bold\", size = 18)\n  )\n\n# combine both plots\np1 / p2 + plot_layout(heights = c(1, 2))\n\n\n\n\n\nInsight:\nThe treemap provides a high-level view of the total population across planning areas, showing that Tampines, Bedok, Sengkang, and Jurong West are the most densely populated regions in Singapore. These areas dominate in population size, occupying larger blocks and warmer color tones.\nThe bar charts below offer a breakdown by age group, revealing nuanced patterns: Tampines and Sengkang consistently rank high across most age groups, especially for adults and children, suggesting a family-oriented residential profile. In contrast, areas like Bedok have a significantly larger elderly population, while Woodlands stands out in the young adult category.\nThe variation across age groups highlights the differing demographic compositions of planning areas, which can inform planning for schools, eldercare, housing, and transportation needs."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---demographic-structure-and-aging-patterns-in-singapores-top-residential-planning-areas",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#visuallisation-3---demographic-structure-and-aging-patterns-in-singapores-top-residential-planning-areas",
    "title": "Take Home Exercise 1",
    "section": "3.3 Visuallisation 3 - Demographic Structure and Aging Patterns in Singapore’s Top Residential Planning Areas",
    "text": "3.3 Visuallisation 3 - Demographic Structure and Aging Patterns in Singapore’s Top Residential Planning Areas\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# palette for all 20 PAs\narea_colors_all &lt;- colorRampPalette(\n  RColorBrewer::brewer.pal(10, \"Set3\")\n)(20)\nnames(area_colors_all) &lt;- top20_PAs\n\n# Violin plot\np1 &lt;- ggplot(violin_filtered, aes(x = PA, y = Age, fill = PA)) +\n  geom_violin(trim = FALSE, scale = \"area\", width = 0.8, alpha = 0.7) +\n  geom_boxplot(width = 0.1, outlier.shape = NA, color = \"black\") +\n  scale_fill_manual(values = area_colors_all[top10_PAs]) +\n  labs(\n    title = \"Age Distribution by Planning Area (Top 10 Residential Areas)\",\n    x     = \"Planning Area\",\n    y     = \"Age\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    axis.text.x     = element_text(angle = 45, hjust = 1),\n    axis.title      = element_text(size = 16),\n    plot.title      = element_text(face = \"bold\", size = 18)\n  )\n\n# Scatter plot\np2 &lt;- ggplot(pa_summary20, aes(\n      x = Total_Pop,\n      y = Avg_Age,\n      size = Elderly_Prop,\n      fill = PA\n    )) +\n  geom_point(shape = 21, alpha = 0.8, color = \"black\") +\n  geom_text_repel(aes(label = PA), size = 4, max.overlaps = 30) +\n  \n  scale_fill_manual(values = area_colors_all, guide = FALSE) +\n  scale_size_continuous(\n    name  = \"Elderly Proportion\",\n    range = c(6, 20)\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  labs(\n    title = \"Average Age vs. Total Population (Top 20 Planning Areas)\",\n    x     = \"Total Population\",\n    y     = \"Average Age\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"right\",\n    legend.title    = element_text(size = 14),\n    legend.text     = element_text(size = 12),\n    axis.title      = element_text(size = 16),\n    plot.title      = element_text(face = \"bold\", size = 18)\n  )\n\n# combine\n(p2 / p1) + plot_layout(heights = c(1, 0.6))\n\n\n\n\n\nInsight:\nOn the scatterplot, total population per PA ranges from approximately 90,000 in Sembawang to about 275,000 in Bedok and Tampines. Average ages vary between 36 years in Punggol and 46 years in Ang Mo Kio, with intermediate mean ages (≈38–45) in other PAs. Bubble sizes indicate elderly proportion: Ang Mo Kio (~20 %) and Bukit Merah (~18 %) have the largest shares, while Sembawang and Punggol register the smallest (~12 %).\nIn the violin plots for the top ten PAs, median ages are clustered between roughly 35 and 45 years; the interquartile ranges span about 20–30 years. Bedok and Hougang violins have wide upper distributions—indicating substantial populations over 60—while Punggol’s shape is narrowly concentrated between 20 and 40. Medians appear highest in Bukit Batok and Sengkang and lowest in Punggol and Choa Chu Kang."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "By the end of this hands-on exercise we will learn the the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "title": "Hands-on Exercise 6",
    "section": "3.2 Importing the data",
    "text": "3.2 Importing the data\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "title": "Hands-on Exercise 6",
    "section": "3.3 Examining the data structure",
    "text": "3.3 Examining the data structure\nkable() is uesed to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "title": "Hands-on Exercise 6",
    "section": "3.4 Data Preparation",
    "text": "3.4 Data Preparation\n\nStep 1: Deriving weekday and hour of day fields\nBefore plotting the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting.\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 6",
    "section": "3.5 Building the Calendar Heatmaps",
    "text": "3.5 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6",
    "section": "3.6 Building Multiple Calendar Heatmaps",
    "text": "3.6 Building Multiple Calendar Heatmaps\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, we need to:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n\n\nStep 2: Preparing the tidy data frame\nIn this step, we need to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "title": "Hands-on Exercise 6",
    "section": "Step 1: Data Import",
    "text": "Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-on Exercise 6",
    "section": "Step 2: Deriving month and year fields",
    "text": "Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "title": "Hands-on Exercise 6",
    "section": "Step 3: Extracting the target country",
    "text": "Step 3: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "title": "Hands-on Exercise 6",
    "section": "Step 4: Computing year average arrivals by month",
    "text": "Step 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "title": "Hands-on Exercise 6",
    "section": "Step 5: Plotting the cycle plot",
    "text": "Step 5: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "title": "Hands-on Exercise 6",
    "section": "Step 1: Data Import",
    "text": "Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 6",
    "section": "Step 2: Plotting the slopegraph",
    "text": "Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n rice %&gt;% \n   mutate(Year = factor(Year)) %&gt;%\n   filter(Year %in% c(1961, 1980)) %&gt;%\n   newggslopegraph(Year, Yield, Country,\n                 Title = \"Rice Yield of Top 11 Asian Counties\",\n                 SubTitle = \"1961-1980\",\n                 Caption = \"Prepared by: Dr. Kam Tin Seong\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html",
    "title": "Hands-on Exercise 4 part 4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. This hands-on exercise will illustrate:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4 part 4",
    "section": "4.1 FunnelPlotR methods: The basic plot",
    "text": "4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Exercise 4 part 4",
    "section": "4.3 FunnelPlotR methods: Makeover 2",
    "text": "4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative \\n Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n) \n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion.\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.1 Computing the basic derived fields",
    "text": "5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.3 Plotting a static funnel plot",
    "text": "5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04_part4/Hands-on_Ex04_part4.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4 part 4",
    "section": "5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly()of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html",
    "title": "Hands-on Exercise 4 part 2",
    "section": "",
    "text": "This hands-on exercise will be using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#loading-the-packages",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.1 Loading the packages",
    "text": "3.1 Loading the packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#import-data",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.2 Import Data",
    "text": "3.2 Import Data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#data-overview",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#data-overview",
    "title": "Hands-on Exercise 4 part 2",
    "section": "Data Overview",
    "text": "Data Overview\n\nsummary()\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\nglimpse()\n\nglimpse(exam)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\nhead()\n\nhead(exam,100)\n\n# A tibble: 100 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 90 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.3 One-sample test: gghistostats() method",
    "text": "3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#unpacking-the-bayes-factor",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.4 Unpacking the Bayes Factor",
    "text": "3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.5 How to interpret Bayes Factor",
    "text": "3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.6 Two-sample mean test: ggbetweenstats()",
    "text": "3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(data = exam,\n               x = GENDER,\n               y = MATHS,\n               type = \"np\", #non-parametric\n               messages = FALSE)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nggbetweenstats(data = exam,\n               x = GENDER,\n               y = MATHS,\n               type = \"r\",\n               messages = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(data = exam,\n               x = MATHS,\n               y = ENGLISH,\n               marginal = FALSE,\n               )\n\n\n\n\n\n\n\n\n\nggscatterstats(data = exam,\n               x = MATHS,\n               y = ENGLISH,\n               marginal = TRUE,\n               )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04_part2/Hands-on_Ex04_part2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4 part 2",
    "section": "3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;%\n  mutate(MATHS_bins =\n           cut(MATHS,\n               breaks = c(0,60,75,85,100)))\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1,\n           x = MATHS_bins,\n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html",
    "title": "Hands-on Exercise 3 part 2",
    "section": "",
    "text": "This hands-on exercise shows how to create animated data visualisation by using gganimate and plotly r packages. At the same time, this exercise demostrates how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nKey concepts and terminology related to this type of visualization:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\nBefore creating animated graphs, it is important to consider whether the effort is justified. While animation may not significantly enhance exploratory data analysis, it can be highly effective in presentations by helping the audience engage with the topic more deeply compared to static visuals"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3 part 2",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#terminology",
    "title": "Hands-on Exercise 3 part 2",
    "section": "",
    "text": "Key concepts and terminology related to this type of visualization:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\nBefore creating animated graphs, it is important to consider whether the effort is justified. While animation may not significantly enhance exploratory data analysis, it can be highly effective in presentations by helping the audience engage with the topic more deeply compared to static visuals"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3 part 2",
    "section": "2.1 Loading the R packages",
    "text": "2.1 Loading the R packages\nThe code chunk below checks, installs and loads the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n2.2 Importing the data\nThe code chunk below imports Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(all_of(col), as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3 part 2",
    "section": "3 Animated Data Visualisation: gganimate methods",
    "text": "3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3 part 2",
    "section": "3.1 Building a static population bubble plot",
    "text": "3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3 part 2",
    "section": "3.2 Building the animated bubble plot",
    "text": "3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3 part 2",
    "section": "4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, an animated bubble plot is created by using ggplotly() method.\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\ngg &lt;- ggplot(globalPop,\n             aes(x = Old,\n                 y = Young,\n                 size = Population,\n                 colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(x = '% Aged',\n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3 part 2",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, an animated bubble plot is created by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on_Ex02",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "title": "Hands-on_Ex02",
    "section": "Importing the data",
    "text": "Importing the data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#summary",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#summary",
    "title": "Hands-on_Ex02",
    "section": "summary",
    "text": "summary\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "3.1 Working with ggrepel",
    "text": "3.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Ex02",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths score\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on_Ex02",
    "section": "4.2 Working with hrbthems package",
    "text": "4.2 Working with hrbthems package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on_Ex02",
    "section": "5.1 Creating Composite Graphics: pathwork methods",
    "text": "5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\nTwo-Column Layout using the Plus Sign +. Parenthesis () to create a subplot group. Two-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\n\n(p1 /p2) | p3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Ex02",
    "section": "5.4 Creating a composite figure with tag",
    "text": "5.4 Creating a composite figure with tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on_Ex02",
    "section": "5.5 Creating figure with insert",
    "text": "5.5 Creating figure with insert\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on_Ex02",
    "section": "5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.6 Creating a composite figure by using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on_Ex01",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on_Ex01",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on_Ex01",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on_Ex01",
    "section": "R Graphics VS ggplot",
    "text": "R Graphics VS ggplot\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"skyblue1\", \n                 fill=\"paleturquoise\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on_Ex01",
    "section": "Essential Grammatical Elements in ggplot2: data",
    "text": "Essential Grammatical Elements in ggplot2: data\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on_Ex01",
    "section": "Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "Essential Grammatical Elements in ggplot2: Aesthetic mappings\n\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on_Ex01",
    "section": "Geometric Objects: geom_bar",
    "text": "Geometric Objects: geom_bar\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on_Ex01",
    "section": "Geometric Objects: geom_dotplot",
    "text": "Geometric Objects: geom_dotplot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on_Ex01",
    "section": "Geometric Objects: geom_histogram()",
    "text": "Geometric Objects: geom_histogram()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on_Ex01",
    "section": "Modifying a geometric object by changing geom()",
    "text": "Modifying a geometric object by changing geom()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on_Ex01",
    "section": "Modifying a geometric object by changing aes()",
    "text": "Modifying a geometric object by changing aes()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on_Ex01",
    "section": "Geometric Objects: geom-density()",
    "text": "Geometric Objects: geom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n          color = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on_Ex01",
    "section": "Geometric Objects: geom_boxplot",
    "text": "Geometric Objects: geom_boxplot\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER))+\n  geom_boxplot(notch = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on_Ex01",
    "section": "Geometric Objects: geom_violin",
    "text": "Geometric Objects: geom_violin\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on_Ex01",
    "section": "Geometric Objects: geom_point()",
    "text": "Geometric Objects: geom_point()\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=ENGLISH))+\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on_Ex01",
    "section": "geom objects can be combined",
    "text": "geom objects can be combined\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on_Ex01",
    "section": "Working with stat()",
    "text": "Working with stat()\n\nggplot(data=exam_data,\n       aes(y=MATHS,x=GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on_Ex01",
    "section": "Working with stat - the stat_summary() method",
    "text": "Working with stat - the stat_summary() method\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER))+\n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour=\"red\",\n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on_Ex01",
    "section": "Working with stat - the geom() method",
    "text": "Working with stat - the geom() method\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",\n             fun=\"mean\",\n             colour=\"lightskyblue1\",\n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on_Ex01",
    "section": "Adding a best fit curve on a scatterplot",
    "text": "Adding a best fit curve on a scatterplot\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=ENGLISH))+\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=ENGLISH)) +\n  geom_point()+\n  geom_smooth(method = lm,\n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on_Ex01",
    "section": "Working with facet_wrap()",
    "text": "Working with facet_wrap()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on_Ex01",
    "section": "facet_grid() function",
    "text": "facet_grid() function\n\nggplot(data = exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on_Ex01",
    "section": "Working with Coordinate",
    "text": "Working with Coordinate\n\nggplot(data= exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on_Ex01",
    "section": "Changing the y- and x-axis range",
    "text": "Changing the y- and x-axis range\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH)) +\n  geom_point()+\n  geom_smooth(method = lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on_Ex01",
    "section": "Working with theme",
    "text": "Working with theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html",
    "title": "Hands-on Exercise 3 part 1",
    "section": "",
    "text": "This hands-on exercise shows how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3 part 1",
    "section": "Tooltip effect with tooltip aesthetic",
    "text": "Tooltip effect with tooltip aesthetic\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\nImproved plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    binwidth = 1,\n    stackgroups = TRUE,\n    dotsize = 0.8,          # Make dots bigger\n    color = \"darkblue\",     # Dot border color\n    fill = \"skyblue\",       # Dot fill color\n    method = \"histodot\",\n    binaxis = \"x\"           # Stack along x-axis\n  ) +\n  scale_y_continuous(NULL, breaks = NULL) +  # Hide y-axis\n  labs(\n    title = \"Distribution of Maths Scores\",\n    x = \"Maths Score\",\n    y = NULL\n  ) +\n  theme_minimal() +          # Cleaner background\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.text.x = element_text(size = 12),\n    axis.title.x = element_text(size = 14)\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,            # Slightly bigger\n  height_svg = 8 * 0.618    \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.1 Customising Tooltip style",
    "text": "6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)   \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.2 Displaying statistics on tooltip",
    "text": "6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.3 Hover effect with data_id aesthetic",
    "text": "6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)  \n\n\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#styling-hover-effect",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.4 Styling hover effect",
    "text": "6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.5 Combining tooltip and hover effect",
    "text": "6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.6 Click effect with onclick",
    "text": "6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618) \n\n\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3 part 1",
    "section": "6.7 Coordinated Multiple Views with ggiraph",
    "text": "6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nThe following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.2 Working with visual variable: plot_ly() method",
    "text": "7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\nClick on the colour symbol at the legend.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3 part 1",
    "section": "7.4 Coordinated Multiple Views with plotly",
    "text": "7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3 part 1",
    "section": "8.1 Interactive Data Table: DT package",
    "text": "8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03_part1/Hands-on_Ex03_part1.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3 part 1",
    "section": "8.2 Linked brushing: crosstalk method",
    "text": "8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html",
    "title": "Hands-on Exercise 4 part 1",
    "section": "",
    "text": "This exercise demonstrates two statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#loading-the-packages",
    "title": "Hands-on Exercise 4 part 1",
    "section": "2.1 Loading the packages",
    "text": "2.1 Loading the packages\nThe following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#import-data",
    "title": "Hands-on Exercise 4 part 1",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#data-overview",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#data-overview",
    "title": "Hands-on Exercise 4 part 1",
    "section": "2.3 Data Overview",
    "text": "2.3 Data Overview\n\nsummary()\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\nglimpse()\n\nglimpse(exam)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\nhead()\n\nhead(exam,100)\n\n# A tibble: 100 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 90 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4 part 1",
    "section": "3.1 Plotting ridgeline graph: ggridges method",
    "text": "3.1 Plotting ridgeline graph: ggridges method\nThis section demonstrates how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4 part 1",
    "section": "3.2 Varying fill colors along the x axis",
    "text": "3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = after_stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4 part 1",
    "section": "3.3 Mapping the probabilities directly onto colour",
    "text": "3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4 part 1",
    "section": "3.4 Ridgeline plots with quantile lines",
    "text": "3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4 part 1",
    "section": "4.1 Plotting a Half Eye graph",
    "text": "4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntips\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4 part 1",
    "section": "4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4 part 1",
    "section": "4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04_part1/Hands-on_Ex04_part1.html#finishing-touch",
    "title": "Hands-on Exercise 4 part 1",
    "section": "4.4 Finishing touch",
    "text": "4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html",
    "title": "Hands-on Exercise 4 part 3",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4 part 3",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-import",
    "title": "Hands-on Exercise 4 part 3",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-overview",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#data-overview",
    "title": "Hands-on Exercise 4 part 3",
    "section": "Data Overview",
    "text": "Data Overview\n\nsummary()\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\nglimpse()\n\nglimpse(exam)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\nhead()\n\nhead(exam,100)\n\n# A tibble: 100 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 90 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4 part 3",
    "section": "3.1 Plotting standard error bars of point estimates",
    "text": "3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat = “identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4 part 3",
    "section": "3.2 Plotting confidence interval of point estimates",
    "text": "3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars are sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4 part 3",
    "section": "3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4 part 3",
    "section": "4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Exercise 4 part 3",
    "section": "4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n95% confidence interval\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n99% confidence interval\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = 0.99,\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-on Exercise 4 part 3",
    "section": "4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#installing-ungeviz-package",
    "title": "Hands-on Exercise 4 part 3",
    "section": "5.1 Installing ungeviz package",
    "text": "5.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\", force = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#launch-the-application-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#launch-the-application-in-r",
    "title": "Hands-on Exercise 4 part 3",
    "section": "5.2 Launch the application in R",
    "text": "5.2 Launch the application in R\n\nlibrary(ungeviz)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04_part3/Hands-on_Ex04_part3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 4 part 3",
    "section": "5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "This hands-on exercise illustrates how to model, analyse, and visualise network data using R.\nBy the end of this hands-on exercise, we will know how to:\n\ncreate graph object data frames and manipulate them using functions from packages such as dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5",
    "section": "2.1 Installing and launching R packages",
    "text": "2.1 Installing and launching R packages\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "title": "Hands-on Exercise 5",
    "section": "3.1 Importing network data from files",
    "text": "3.1 Importing network data from files\nIn this step, I will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "title": "Hands-on Exercise 5",
    "section": "3.2 Reviewing the imported data",
    "text": "3.2 Reviewing the imported data\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "title": "Hands-on Exercise 5",
    "section": "3.3 Wrangling time",
    "text": "3.3 Wrangling time\nThe code chunk below will be used to perform the changes.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "title": "Hands-on Exercise 5",
    "section": "3.4 Reviewing the revised date fields",
    "text": "3.4 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "title": "Hands-on Exercise 5",
    "section": "3.5 Wrangling attributes",
    "text": "3.5 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, I will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "title": "Hands-on Exercise 5",
    "section": "3.6 Reviewing the revised edges file",
    "text": "3.6 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "title": "Hands-on Exercise 5",
    "section": "4.1 The tbl_graph object",
    "text": "4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network.\nBelow are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "title": "Hands-on Exercise 5",
    "section": "4.2 The dplyr verbs in tidygraph",
    "text": "4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model",
    "title": "Hands-on Exercise 5",
    "section": "4.3 Using tbl_graph() to build tidygraph data model",
    "text": "4.3 Using tbl_graph() to build tidygraph data model\nIn this section, I will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "Hands-on Exercise 5",
    "section": "4.4 Reviewing the output tidygraph’s graph object",
    "text": "4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "title": "Hands-on Exercise 5",
    "section": "4.5 Reviewing the output tidygraph’s graph object",
    "text": "4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "title": "Hands-on Exercise 5",
    "section": "4.6 Changing the active object",
    "text": "4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but we can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "5.1 Plotting a basic network graph",
    "text": "5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "title": "Hands-on Exercise 5",
    "section": "5.2 Changing the default network graph theme",
    "text": "5.2 Changing the default network graph theme\nIn this section, I will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "title": "Hands-on Exercise 5",
    "section": "5.3 Changing the coloring of the plot",
    "text": "5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "title": "Hands-on Exercise 5",
    "section": "5.4 Working with ggraph’s layouts",
    "text": "5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "title": "Hands-on Exercise 5",
    "section": "5.5 Fruchterman and Reingold layout",
    "text": "5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "title": "Hands-on Exercise 5",
    "section": "5.6 Modifying network nodes",
    "text": "5.6 Modifying network nodes\nIn this section, each node will be colourled by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "title": "Hands-on Exercise 5",
    "section": "5.7 Modifying edges",
    "text": "5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "title": "Hands-on Exercise 5",
    "section": "6.1 Working with facet_edges()",
    "text": "6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for me to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges-1",
    "title": "Hands-on Exercise 5",
    "section": "6.2 Working with facet_edges()",
    "text": "6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "title": "Hands-on Exercise 5",
    "section": "6.3 A framed facet graph",
    "text": "6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "title": "Hands-on Exercise 5",
    "section": "6.4 Working with facet_nodes()",
    "text": "6.4 Working with facet_nodes()\nIn the code chunk below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "title": "Hands-on Exercise 5",
    "section": "7.1 Computing centrality indices",
    "text": "7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above：\n\nmutate() of dplyr is used to perform the computation.\n\n\n\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "title": "Hands-on Exercise 5",
    "section": "7.2 Visualising network metrics",
    "text": "7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "title": "Hands-on Exercise 5",
    "section": "7.3 Visualising Community",
    "text": "7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it.\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nggforce and concaveman packages must be installed and included before running the code chunk below.\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "Hands-on Exercise 5",
    "section": "8.1 Data preparation",
    "text": "8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "8.2 Plotting the first interactive network graph",
    "text": "8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "title": "Hands-on Exercise 5",
    "section": "8.3 Working with layout",
    "text": "8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "title": "Hands-on Exercise 5",
    "section": "8.4 Working with visual attributes - Nodes",
    "text": "8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "title": "Hands-on Exercise 5",
    "section": "8.5 Working with visual attributes - Edges",
    "text": "8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "title": "Hands-on Exercise 5",
    "section": "8.6 Interactivity",
    "text": "8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               SmartEDA, tidygraph,\n               ggraph) \n\nIn the code chunk below, ‘fromJSON()’ of jaosnlite package is used to import MC1_graph.json file into R and save the output object:\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id=nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map , by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by=c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  #optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#installing-and-loading-the-required-libraries",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#installing-and-loading-the-required-libraries",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite,\n               SmartEDA, tidygraph,\n               ggraph) \n\nIn the code chunk below, ‘fromJSON()’ of jaosnlite package is used to import MC1_graph.json file into R and save the output object:\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n\n\n\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`))+\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#creating-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex_04/In-class_Ex_04.html#creating-knowledge-graph",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "id_map &lt;- tibble(id=nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map , by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by=c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))\n\n\n\n\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n\n\n\n\n\nset.seed(1234)\n\n\n\n\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  #optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "◔.̮◔✧ Hi, I am Qiu Yan. Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course. Thank you for visiting ~"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html",
    "title": "Take Home Exercise - classmate",
    "section": "",
    "text": "The original visualization was created by our classmate Calvin Tan Song Hao. Please refer to this link for the original submission."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#population-across-planning-areas-by-sex",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#population-across-planning-areas-by-sex",
    "title": "Take Home Exercise - classmate",
    "section": "3.1 Population Across Planning Areas by Sex",
    "text": "3.1 Population Across Planning Areas by Sex"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#good-design-principles",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#good-design-principles",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.1 Good design principles",
    "text": "3.1.1 Good design principles\n\nUse of inset plot: The use of an inset plot is particularly effective. It provides a magnified view of planning areas with relatively small populations that would otherwise appear almost invisible in the main chart. This ensures that no data is excluded from analysis, promoting inclusiveness and allowing for scale sensitivity without distorting the overall pattern of the chart.\nClear color coding: Color coding by sex is implemented using familiar and easily distinguishable hues—blue for males and red for females. This choice allows viewers to quickly interpret the distribution of population by gender across different areas without needing to consult the legend repeatedly.\nHorizontal bar chart with proper sorting: The horizontal bar chart is well-structured, with planning areas sorted in descending order of total population. This arrangement supports effective comparative analysis and, importantly, accommodates long area names in a way that avoids label clutter, improving overall readability."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#areas-for-further-improvement",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#areas-for-further-improvement",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.2 Areas for further improvement",
    "text": "3.1.2 Areas for further improvement\n\nStacked bars obscure comparison across genders: The female bars are stacked on top of the male bars, making it difficult to compare female populations across planning areas since they do not share a common baseline. This limits interpretability and distorts direct comparisons. A better approach would be to use a population pyramid format, with males and females on opposite sides of a central axis. Additionally, labeling each bar with the exact population figure would provide immediate numerical clarity and make the chart more informative.\nRedundant legend placement and layout inefficiency: Although the legend is useful, it is somewhat redundant given the clear color-coding. It could be relocated near the inset chart to save space and reduce clutter. In the original layout, overlapping labels made it hard to read planning area names. Removing the legend from its current position would allow the chart to be taller and cleaner, improving overall readability.\nLack of summary indicators: The chart would benefit from the addition of vertical median lines for both male and female populations. These lines would serve as reference benchmarks, allowing users to quickly identify which planning areas have populations above or below the median. This simple addition would enhance interpretability and provide a clearer statistical context to the viewer."
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#makeover",
    "href": "TakeHome_Ex/TakeHome_Ex01_classmate/TakeHome_Ex01_classmate.html#makeover",
    "title": "Take Home Exercise - classmate",
    "section": "3.1.3 Makeover",
    "text": "3.1.3 Makeover\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\n\n# 1 Data prep\ndemography_sex &lt;- sg_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Total = sum(Pop)) %&gt;%\n  filter(Total &gt; 0) %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop)) %&gt;%\n  ungroup()\n\nstats &lt;- demography_sex %&gt;%\n  summarise(\n    total   = sum(abs(Pop)),\n    male    = sum(abs(Pop[Sex==\"Males\"])),\n    female  = sum(Pop[Sex==\"Females\"]),\n    ratio   = sum(abs(Pop[Sex==\"Males\"])) / sum(Pop[Sex==\"Females\"])\n  )\nstats_text &lt;- paste0(\n  \"Total Pop: \",   comma(stats$total),   \"\\n\",\n  \"Male Pop: \",    comma(stats$male),    \"\\n\",\n  \"Female Pop: \",  comma(stats$female),  \"\\n\",\n  \"M:F Ratio: \",   round(stats$ratio,2)\n)\n\n# 2 Ordering\npa_order &lt;- demography_sex %&gt;%\n  distinct(PA, Total) %&gt;%\n  arrange(desc(Total)) %&gt;%\n  pull(PA)\ndemography_sex$PA &lt;- factor(demography_sex$PA, levels = rev(pa_order))\n\n# 3 Identify inset PAs (Newton → Seletar)\npa_seq    &lt;- pa_order\nstart_idx &lt;- which(pa_seq == \"Newton\")\nend_idx   &lt;- which(pa_seq == \"Seletar\")\ninset_order &lt;- pa_seq[start_idx:end_idx]\ninset_data  &lt;- demography_sex %&gt;%\n  filter(PA %in% inset_order) %&gt;%\n  mutate(PA = factor(PA, levels = rev(inset_order)))\n\n# 4 Medians\nmale_med   &lt;- demography_sex %&gt;% filter(Sex==\"Males\")   %&gt;% pull(Pop) %&gt;% abs() %&gt;% median()\nfemale_med &lt;- demography_sex %&gt;% filter(Sex==\"Females\") %&gt;% pull(Pop)          %&gt;% median()\n\n# 5 Highlight region\nhighlight_pos &lt;- match(inset_order, levels(demography_sex$PA))\nymin_hl &lt;- min(highlight_pos) - 0.5\nymax_hl &lt;- max(highlight_pos) + 0.5\n\nbox_pops &lt;- demography_sex %&gt;%\n  filter(PA %in% c(\"Newton\",\"Tengah\")) %&gt;%\n  pull(Pop)\n\nxmin_box &lt;- min(box_pops) \nxmax_box &lt;- max(box_pops) \n\npad &lt;- (xmax_box - xmin_box) * 2\nxmin_box &lt;- xmin_box - pad\nxmax_box &lt;- xmax_box + pad\n\n# DEFINE INSIDE vs OUTSIDE for main plot\ninside_main  &lt;- pa_order[1:which(pa_order==\"Jurong East\")]\noutside_main &lt;- setdiff(pa_order, inside_main)\n\n# DEFINE INSIDE vs OUTSIDE for inset plot\ninside_inset  &lt;- inset_order[1:which(inset_order==\"Changi\")]\noutside_inset &lt;- setdiff(inset_order, inside_inset)\n\n# MAIN PYRAMID\nmain_plot &lt;- ggplot(demography_sex, aes(x = Pop, y = PA, fill = Sex)) +\n  \n  annotate(\"rect\",\n         xmin = xmin_box, xmax = xmax_box,\n         ymin = ymin_hl,  ymax = ymax_hl,\n         colour = \"black\", linetype = \"dotted\",\n         size = 1, fill = NA) +\n  \n  geom_col(width = 0.8) +\n  \n  # summary text in left blank area\n  annotate(\"text\",\n           x    = min(demography_sex$Pop) * 0.8,\n           y    = nlevels(demography_sex$PA) * 0.2,\n           label= stats_text,\n           hjust= 0, size = 3.5, colour = \"grey20\") +\n  \n  # inside labels (Tampines → Jurong East), shifted to bar ends but still inside\n  geom_text(\n    data = filter(demography_sex, PA %in% inside_main),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(demography_sex, PA %in% inside_main)$Sex == \"Males\",\n      0.02, 0.98\n    ),\n    vjust = 0.5,\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  # outside labels (below Rochor → Seletar)\n  geom_text(\n    data = filter(demography_sex, PA %in% outside_main),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(demography_sex, PA %in% outside_main)$Sex == \"Males\",\n      1.1, -0.1\n    ),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  geom_vline(xintercept = -male_med,   linetype=\"longdash\", size=1, colour=\"grey40\") +\n  geom_vline(xintercept =  female_med, linetype=\"longdash\", size=1, colour=\"grey40\") +\n  \n  annotate(\"text\",\n           x    = -male_med, y = Inf,\n           label= paste0(\"Median\\n\", comma(male_med)),\n           hjust= 1.1, vjust= -0.5,\n           size = 3, colour = \"grey20\") +\n  annotate(\"text\",\n           x    =  female_med, y = Inf,\n           label= paste0(\"Median\\n\", comma(female_med)),\n           hjust= -0.1, vjust= -0.5,\n           size = 3, colour = \"grey20\") +\n  \n  scale_fill_manual(values = c(\"Males\"=\"#ADD8E6\",\"Females\"=\"#FFB6C1\")) +\n  scale_x_continuous(\n    labels = function(x) comma(abs(x))\n  ) +\n  scale_y_discrete(expand = expansion(add = c(0,2))) +\n  \n  labs(x=\"Population\", y=\"Planning Area\") +\n  theme_minimal() +\n  theme(\n    plot.title      = element_blank(),\n    axis.title      = element_text(size=12),\n    axis.text       = element_text(size=9),\n    legend.position = \"none\"\n  ) +\n  coord_cartesian(clip=\"off\")\n\n# INSET PLOT\ninset_plot &lt;- ggplot(inset_data, aes(x = Pop, y = PA, fill = Sex)) +\n  geom_col(width = 0.8) +\n  \n  # inside inset labels (Newton → Changi)\n  geom_text(\n    data = filter(inset_data, PA %in% inside_inset),\n    aes(label = comma(abs(Pop))),\n    position = position_stack(vjust = 0.5),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  # outside inset labels (Mandai → Seletar)\n  geom_text(\n    data = filter(inset_data, PA %in% outside_inset),\n    aes(label = comma(abs(Pop))),\n    position = position_identity(),\n    hjust = ifelse(\n      filter(inset_data, PA %in% outside_inset)$Sex == \"Males\",\n      1.1, -0.1\n    ),\n    size = 2.5, colour = \"black\"\n  ) +\n  \n  scale_fill_manual(values = c(\"Males\"=\"#ADD8E6\",\"Females\"=\"#FFB6C1\")) +\n  scale_x_continuous(\n    labels = function(x) comma(abs(x))\n  ) +\n  theme_minimal(base_size=9) +\n  theme(\n    axis.title       = element_blank(),\n    axis.text.y      = element_text(size=7),\n    axis.text.x      = element_text(size=7),\n    panel.background = element_rect(fill=\"white\", colour=NA),\n    panel.grid.major = element_line(colour=\"grey90\"),\n    legend.position  = \"none\"\n  )\n\n# DOTTED BOX FOR THE INSET\nzoom_box &lt;- ggplot() +\n  theme_void() +\n  annotate(\"rect\",\n           xmin = 0, xmax = 1,\n           ymin = 0, ymax = 1,\n           colour = \"black\", linetype = \"dotted\", size = 1, fill = NA)\n\n# ASSEMBLE EVERYTHING\ntitle_plot &lt;- ggdraw() +\n  draw_label(\"Population Across Planning Areas by Sex\",\n             fontface=\"bold\", size=16, hjust=0.3)\n\nlabel_plot &lt;- ggdraw() +\n  draw_label(\"Males\",   x=0.3, y=0.5, fontface=\"bold\", size=13, colour=\"#ADD8E6\") +\n  draw_label(\"Females\", x=0.8, y=0.5, fontface=\"bold\", size=13, colour=\"#FFB6C1\")\n\nfinal_plot &lt;- plot_grid(\n  title_plot,\n  label_plot,\n  ggdraw(main_plot) +\n    draw_plot(inset_plot, x=0.665, y=0.06, width=0.33, height=0.40) +\n    draw_plot(zoom_box,      x=0.65, y=0.07, width=0.35, height=0.40),\n  ncol=1,\n  rel_heights=c(0.04,0.07,0.89)\n)\n\nprint(final_plot)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html",
    "title": "Hands-on Exercise 8 part 1",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we will learn how to plot functional and truthful choropleth maps by using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#the-data",
    "title": "Hands-on Exercise 8 part 1",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#importing-geospatial-data-into-r",
    "title": "Hands-on Exercise 8 part 1",
    "section": "3.2 Importing Geospatial Data into R",
    "text": "3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\tqy87\\OneDrive\\Documents\\natsutai66\\isss608-qiuyan\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nExamine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#importing-attribute-data-into-r",
    "title": "Hands-on Exercise 8 part 1",
    "section": "3.3 Importing Attribute Data into R",
    "text": "3.3 Importing Attribute Data into R\nNext, I will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#data-preparation",
    "title": "Hands-on Exercise 8 part 1",
    "section": "3.4 Data Preparation",
    "text": "3.4 Data Preparation\nBefore a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "Hands-on Exercise 8 part 1",
    "section": "4.1 Plotting a choropleth map quickly by using qtm()",
    "text": "4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands-on Exercise 8 part 1",
    "section": "4.2 Creating a choropleth map by using tmap’s elements",
    "text": "4.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, I will use tmap functions to plot these elements.\n\n4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings I learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. We will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n4.2.3 Drawing a choropleth map using tm_fill() and tm_border()\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 8 part 1",
    "section": "4.3 Data classification methods of tmap",
    "text": "4.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\nDIY 1 (different classification methods)\n\nhclustsdkmeansfisher\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"hclust\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"sd\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"kmeans\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"fisher\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nDIY 2 (Number of class)\n\n261020\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 2)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 6)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 10)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 20)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaksoption (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7867  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, I will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#colour-scheme",
    "title": "Hands-on Exercise 8 part 1",
    "section": "4.4 Colour Scheme",
    "text": "4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#map-layouts",
    "title": "Hands-on Exercise 8 part 1",
    "section": "4.5 Map Layouts",
    "text": "4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n4.5.1 Map Legend\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n\n\n\n\n\n\n\n\n\n\n4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 8 part 1",
    "section": "4.6 Drawing Small Multiple Choropleth Maps",
    "text": "4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 8 part 1",
    "section": "4.7 Mappping Spatial Object Meeting a Selection Criterion",
    "text": "4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, we can also use selection funtion to map spatial objects meeting the selection criterion.\n\n# I have tried various solutions, but was unable to properly color the histogram and display the legend.\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"EAST REGION\",])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.5) +\n  tm_layout(legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#all-about-tmap-package",
    "title": "Hands-on Exercise 8 part 1",
    "section": "5.1 All about tmap package",
    "text": "5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 8 part 1",
    "section": "5.2 Geospatial data wrangling",
    "text": "5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08_part1.html#data-wrangling-1",
    "title": "Hands-on Exercise 8 part 1",
    "section": "5.3 Data wrangling",
    "text": "5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex03/TakeHome_Ex03.html#communication-patterns",
    "href": "TakeHome_Ex/TakeHome_Ex03/TakeHome_Ex03.html#communication-patterns",
    "title": "Take Home Exercise 3",
    "section": "2.1 Communication patterns",
    "text": "2.1 Communication patterns\n\nThis interface is designed to reveal temporal communication patterns and how they change over two weeks. The user can adjust time granularity (hourly, daily, weekly) and filter the date range to spot recurring daily peaks in message traffic. Interactive controls allow focusing on a specific person or entity, highlighting that entity’s communications to determine who frequently contacts or influences them. This addresses Clepper’s goal of identifying regular daily communication times and shifts in these patterns, and seeing influence relationships for a chosen entity.\n\nUI Components & Layout\n\n\n\n\n\n\n\n\n\n\nComponent\ndescription\nShiny & R packages\n\n\nTime Granularity Filter\nA dropdown to aggregate messages by hour-of-day or by day/week. This lets the user switch the resolution of the trend analysis.\nselectInput\nshinyWidgets::pickerInput\n\n\nDate Range Slider\nAn interactive date slider to select the two-week observation window or a specific subrange.\nsliderInput\n\n\nEntity Selector\nA dropdown search input to select a specific entity (person or vessel) of interest. When an entity is chosen, the plots highlight or filter to communications involving that entity.\nselectInput\nshinyWidgets::pickerInput\n\n\nMessage Trend\nA line chart showing the count of messages over time. X-axis as date/time, y-axis as message count. This reveals daily spikes and how they shift over the two weeks. The chart updates based on the chosen granularity.\nggplotly\n\n\nDaily Pattern Heatmap\nA heatmap visualizing message frequency by hour-of-day (columns) vs date (rows). Each cell’s color intensity reflects the number of communications at that hour on that day, making it easy to spot recurring daily time slots with heavy activity\ngeom_tile()\nggplotly\nheatmaply\n\n\nMessage Distribution\nWhen the user selects a specific day, a sub-chart displays the distribution of that day’s communications. This could be a bar plot of messages by hour for that day. If focusing on a specific entity, the chart might show inbound vs outbound messages for that person on that day.\nggplot2\nggplotly\n\n\nInterpretation Panel\nA short text box aligned in the sidebar providing guidance on how to read the charts, and legends.\nhelpText()\nwellPanel()"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex03/TakeHome_Ex03.html#network-analysis",
    "href": "TakeHome_Ex/TakeHome_Ex03/TakeHome_Ex03.html#network-analysis",
    "title": "Take Home Exercise 3",
    "section": "2.2 Network analysis",
    "text": "2.2 Network analysis\n\nThis interface enables Clepper to explore how people and vessels are interconnected in the knowledge graph, and to discover groupings of entities that frequently interact. The user can toggle between different network views to examine specific interaction types. They can also identify cohesive clusters (communities) in the network and discern which thematic “group” each cluster might represent. The interface also supports selecting an individual node to highlight its connections, helping reveal sub-networks or tightly knit groups, and ultimately addresses which entities form closely associated groups and what topics characterize those groups.\n\nUI Components & Layout\n\n\n\n\n\n\n\n\n\n\nComponent\ndescription\nShiny & R packages\n\n\n\n\nNetwork View Selector\nA set of tabs or radio buttons to switch between sub-views of the network analysis, listed as “Overview, Relationship, Interaction, Clustering” in a sidebar menu. Each sub-view filters or formats the network differently.\ntabsetPanel\nnavlistPanel\nradioButtons\n\n\nNode Type Legend\nThe network uses distinct shapes or colors for different entity types.\nvisLegend()\n\n\nNetwork Graph Display\nAn interactive network diagram that visualizes nodes and their connections. Users can pan/zoom, and hovering on a node can show its name or details. The graph updates based on the selected view/filter.\n\n\n\nCentrality Metric Highlighting\n\n\n\n\nNode Selection & Details\n\n\n\n\nCluster Exploration Aids"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex03/TakeHome_Ex03.html#nadia-condis-illegal-activities",
    "href": "TakeHome_Ex/TakeHome_Ex03/TakeHome_Ex03.html#nadia-condis-illegal-activities",
    "title": "Take Home Exercise 3",
    "section": "2.3 Nadia Condi’s illegal activities",
    "text": "2.3 Nadia Condi’s illegal activities\n\nThis interface is a case-focused dashboard examining Nadia Conti’s involvement in potentially illegal activities. The goal is to provide visual evidence of Nadia’s illicit actions and to summarize her role over time. The user can see Nadia’s ego-network of connections, highlighting how she is linked to key events and individuals, and view a timeline of critical events involving Nadia. Interactive elements allow the investigator to filter or distinguish confirmed illegal acts from inferred or suspected ones, reinforcing whether Nadia is indeed at the center of wrongdoing. The design thus helps answer whether Nadia is doing something illegal and visually summarize her actions over the two-week period.\n\nUI Components & Layout"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  }
]