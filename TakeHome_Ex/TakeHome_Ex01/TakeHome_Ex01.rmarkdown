---
title: "Take Home Exercise 1"
description: "Demographic structures and distribution of Singapore in 2024"
author: "Tai Qiu Yan"
date: "May 2, 2024"
date-modified: "last-modified"
format: html
editor: visual
execute:
  eval: true
  echo: true
  warning: false
---



# 1 **Overview**

# 2 Data Pre-processing and Exploration

## 2.1 Installing and loading the required libraries



```{r}
pacman::p_load(dplyr, scales, ggrepel, 
               patchwork, ggthemes, hrbrthemes,tidyverse, 
               tidytext,treemapify) 
```



## 2.2 Importing dataset

::: panel-tabset
## The code



```{r}
population_data <- read_csv("respopagesex2024.csv") %>%
  mutate(Age = as.numeric(Age))

glimpse(population_data)
```



## Explaination

The code chunk below imports the dataset `respopagesex2024.csv` and load the CSV file into a dataframe named `population_data`.

After import, the `mutate()` function is applied to convert the `Age` column from character to numeric format.

Lastly, the `glimpse()` function provides a concise overview of the dataset’s structure, displaying column names, data types, and sample values.
:::

## 2.3 Dataset for visuallisation 1

::: panel-tabset
## The code



```{r}
pyramid_data <- population_data %>%
  mutate(
    Age = as.numeric(Age),
    AgeGroup = cut(
      Age,
      breaks = c(seq(0, 100, by = 5), Inf),
      right = FALSE,
      labels = c(paste(seq(0, 95, 5), seq(4, 99, 5), sep = "–"), "100+")
    )
  ) %>%
  filter(!is.na(AgeGroup)) %>%
  group_by(AgeGroup, Sex) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  mutate(Pop = ifelse(Sex == "Males", -Pop, Pop))
```



## Explaination

The code prepares the dataset `population_data` for visualising a population pyramid by first converting the `Age` column to numeric format. It then categorises individual ages into 5-year intervals using the `cut()` function, creating a new variable `AgeGroup` with labels such as "0–4", "5–9", ..., and "100+". Any rows with missing `AgeGroup` values are filtered out. The data is then grouped by both `AgeGroup` and `Sex`, and the total population (`Pop`) within each group is calculated using `summarise()`. Finally, to enable the mirrored bar chart structure of a population pyramid, male population values are converted to negative using `mutate()` with an `ifelse()` condition. This transformation allows males to be displayed on the left and females on the right of the central axis in the plot.
:::

::: panel-tabset
## The code



```{r}
pyramid_data_grouped <- population_data %>%
  mutate(
    AgeGroup = case_when(
      Age <= 12 ~ "Children",
      Age >= 13 & Age <= 18 ~ "Teenager",
      Age > 18 & Age <= 25 ~ "Young Adult",
      Age >= 26 & Age <= 44 ~ "Adult",
      Age >= 45 & Age <= 65 ~ "Middle-age",
      Age > 65 ~ "Elderly"
    )
  ) %>%
  filter(!is.na(AgeGroup)) %>%
  group_by(AgeGroup, Sex) %>%
  summarise(Total_Pop = sum(Pop), .groups = "drop") %>%
  mutate(
    AgeGroup = factor(AgeGroup, levels = c("Children", "Teenager", "Young Adult", "Adult", "Middle-age", "Elderly")),
    Total_Pop_k = paste0(round(Total_Pop / 1000), "k")
  )
```



## Explaination

The code involves transforming population data into a summarized form suitable for visualizing population distribution by broad age categories and sex. First, the `Age` variable is classified into six age groups—Children, Teenager, Young Adult, Adult, Middle-age, and Elderly—using logical conditions via the `case_when()` function. Any records with missing or undefined age groups are removed using `filter()`. The data is then grouped by both `AgeGroup` and `Sex`, and the total population for each group is calculated using `summarise()`. To ensure a consistent order in plots, the `AgeGroup` variable is converted to a factor with a specified level sequence. Finally, a new column `Total_Pop_k` is created to represent the total population in thousands, formatted with a “k” suffix for more concise labeling in visualizations.
:::

## 2.4 Dataset for visuallisation 2

::: panel-tabset
## The code



```{r}
planning_area_population <- population_data %>%
  group_by(PA) %>%
  summarise(Total_Pop = sum(Pop), .groups = "drop") %>%
  filter(Total_Pop > 0) %>%
  mutate(Pop_thousands = Total_Pop / 1000)
```



## Explaination

The code groups the `population_data` by `PA` (Planning Area) and then uses `summarise()` to calculate the total population (`Total_Pop`) within each area by summing the `Pop` values. The `.groups = "drop"` argument ensures the resulting data frame is ungrouped for further processing. Next, it filters out any planning areas with a total population of zero to maintain clarity in the visualization. Finally, the code introduces a new variable, `Pop_thousands`, by dividing the total population by 1,000 to express values in thousands.
:::

::: panel-tabset
## The code



```{r}
population_age_group_top20 <- population_data %>%
  mutate(
    Age = as.numeric(Age),
    AgeGroup = case_when(
      Age <= 12 ~ "Children",
      Age >= 13 & Age <= 18 ~ "Teenager",
      Age > 18 & Age <= 25 ~ "Young Adult",
      Age >= 26 & Age <= 44 ~ "Adult",
      Age >= 45 & Age <= 65 ~ "Middle-age",
      Age > 65 ~ "Elderly"
    )
  ) %>%
  filter(!is.na(AgeGroup)) %>%
  group_by(PA, AgeGroup) %>%
  summarise(Total_Pop = sum(Pop), .groups = "drop") %>%
  filter(Total_Pop > 0) %>%
  group_by(AgeGroup) %>%
  slice_max(order_by = Total_Pop, n = 20) %>%
  ungroup()
```



## Explaination

The provided code prepares a dataset to visualize the top 20 planning areas in Singapore by population across different age groups. It begins by converting the `Age` variable to a numeric format and classifying individuals into custom age groups such as “Children,” “Teenager,” “Young Adult,” “Adult,” “Middle-age,” and “Elderly” using the `case_when()` function. Rows with undefined age groups are removed using `filter()`. The data is then grouped by `PA` (Planning Area) and `AgeGroup`, and the total population for each group is calculated using `summarise()`. After filtering out planning areas with zero population, the code selects the top 20 planning areas per age group based on total population using `slice_max()`. Finally, `ungroup()` is applied to prepare the data for plotting.
:::

## 2.5 Dataset for visuallisation 3



```{r}
age_distribution <- population_data %>%
  mutate(Age = as.numeric(Age)) %>%
  filter(Pop > 0) %>%
  uncount(weights = Pop)
```



# 3 Data visuallisation

## 3.1 Visuallisation 1 - Demographic Structure of Singapore Residents by Age and Sex

:::: panel-tabset
## The plot



```{r fig.width=14, fig.height=10}
#| echo: false
# Population Pyramid
p1 <- ggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +
  geom_col(width = 0.9, color = "white") +
  geom_text(aes(label = comma(abs(Pop))),
            position = position_stack(vjust = 0.5),
            size = 2.8,
            color = "white") +
  coord_flip() +
  scale_y_continuous(labels = function(x) comma(abs(x))) +
  scale_fill_manual(values = c("Males" = "#3182bd", "Females" = "#f768a1")) +
  labs(
    title = "Population Pyramid of Singapore",
    x = "Age Group (5-year bins)",
    y = "Population"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),  # center title
    axis.text = element_text(size = 9),
    axis.title.x = element_text(margin = margin(t = 10)),
    legend.position = "none"
  )

# Age group bar chart
p2 <- ggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Total_Pop, fill = Sex)) +
  geom_col(position = position_dodge(width = 0.9), width = 0.7) +
  geom_text(aes(label = Total_Pop_k),
            position = position_dodge(width = 0.9),
            vjust = -0.3,
            size = 3) +
  scale_y_continuous(labels = label_number(scale = 1e-3, suffix = "k")) +
  scale_fill_manual(values = c("Males" = "#3182bd", "Females" = "#f768a1")) +
  labs(
    title = "Population by Age Groups",
    x = "Age Group",
    y = "Total Population"
  ) +
  theme_minimal() +
  theme(
    axis.text = element_text(size = 10),
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # center title
    legend.position = "none"
  ) +
  annotate("rect", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, alpha = 0) +  # dummy to open up space
  annotate("rect", xmin = 0.5, xmax = 6.5, ymin = 700000, ymax = 800000, fill = NA) +
  annotate("rect", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, fill = NA) +
  annotate("rect", xmin = 2.15, xmax = 2.3, ymin = 430000, ymax = 440000, fill = "#f768a1", color = "black") +
  annotate("text", x = 2.45, y = 435000, label = "Females", hjust = 0, size = 3.5) +
  annotate("rect", xmin = 2.15, xmax = 2.3, ymin = 410000, ymax = 420000, fill = "#3182bd", color = "black") +
  annotate("text", x = 2.45, y = 415000, label = "Males", hjust = 0, size = 3.5)

# Combine and caption
(p1 | p2) +
  plot_annotation(
    caption = "Age Group Ranges: Children: ≤12 | Teenager: 13–18 | Young Adult: 19–25 | Adult: 26–44 | Middle-age: 45–65 | Elderly: ≥65",
    theme = theme(plot.caption = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))
  )
```



## The code

::: {style="font-size: 0.8em"}


```{r fig.width=14, fig.height=10}
#| eval: false
# Population Pyramid
p1 <- ggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +
  geom_col(width = 0.9, color = "white") +
  geom_text(aes(label = comma(abs(Pop))),
            position = position_stack(vjust = 0.5),
            size = 2.8,
            color = "white") +
  coord_flip() +
  scale_y_continuous(labels = function(x) comma(abs(x))) +
  scale_fill_manual(values = c("Males" = "#3182bd", "Females" = "#f768a1")) +
  labs(
    title = "Population Pyramid of Singapore",
    x = "Age Group (5-year bins)",
    y = "Population"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),  # center title
    axis.text = element_text(size = 9),
    axis.title.x = element_text(margin = margin(t = 10)),
    legend.position = "none"
  )

# Age group bar chart
p2 <- ggplot(pyramid_data_grouped, aes(x = AgeGroup, y = Total_Pop, fill = Sex)) +
  geom_col(position = position_dodge(width = 0.9), width = 0.7) +
  geom_text(aes(label = Total_Pop_k),
            position = position_dodge(width = 0.9),
            vjust = -0.3,
            size = 3) +
  scale_y_continuous(labels = label_number(scale = 1e-3, suffix = "k")) +
  scale_fill_manual(values = c("Males" = "#3182bd", "Females" = "#f768a1")) +
  labs(
    title = "Population by Age Groups",
    x = "Age Group",
    y = "Total Population"
  ) +
  theme_minimal() +
  theme(
    axis.text = element_text(size = 10),
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # center title
    legend.position = "none"
  ) +
  annotate("rect", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, alpha = 0) +  # dummy to open up space
  annotate("rect", xmin = 0.5, xmax = 6.5, ymin = 700000, ymax = 800000, fill = NA) +
  annotate("rect", xmin = 2, xmax = 3, ymin = 400000, ymax = 500000, fill = NA) +
  annotate("rect", xmin = 2.15, xmax = 2.3, ymin = 430000, ymax = 440000, fill = "#f768a1", color = "black") +
  annotate("text", x = 2.45, y = 435000, label = "Females", hjust = 0, size = 3.5) +
  annotate("rect", xmin = 2.15, xmax = 2.3, ymin = 410000, ymax = 420000, fill = "#3182bd", color = "black") +
  annotate("text", x = 2.45, y = 415000, label = "Males", hjust = 0, size = 3.5)

# Combine and caption
(p1 | p2) +
  plot_annotation(
    caption = "Age Group Ranges: Children: ≤12 | Teenager: 13–18 | Young Adult: 19–25 | Adult: 26–44 | Middle-age: 45–65 | Elderly: ≥65",
    theme = theme(plot.caption = element_text(hjust = 0.5, size = 12, margin = margin(t = 10)))
  )
```


:::
::::

Insight:

The population pyramid reveals a mature demographic structure with a bulge in the 40–59 age bands, reflecting Singapore’s aging population. The narrower base in the younger cohorts (ages 0–14) suggests declining birth rates, while the balanced width across genders indicates no significant sex disparity at each age group.

The grouped bar chart further aggregates the population into broader life stages. The highest population lies in the “Middle-age” (45–65) and “Adult” (26–44) categories, which together form the majority of the working-age population. In contrast, the “Children” and “Teenager” groups are notably smaller, reinforcing concerns about future population replacement and dependency ratios. The elderly (65+) also form a substantial group, highlighting the importance of eldercare and retirement policy planning.

Together, the visualizations underscore critical demographic challenges: a shrinking youth base, a growing senior population, and the need for sustainable workforce and social support strategies.

## 3.2 Visuallisation 2 - Overview of Population Distribution by Planning Area and Age Group

:::: panel-tabset
## The plot



```{r fig.width=16, fig.height=18}
#| echo: false
# Treemap plot
p1 <- ggplot(planning_area_population, aes(area = Pop_thousands, label = PA, fill = Pop_thousands)) +
  geom_treemap() +
  geom_treemap_text(
    colour = "black",
    place = "centre",
    reflow = TRUE,
    size = 12
  ) +
  scale_fill_viridis_c(option = "D", labels = scales::comma_format(suffix = "k")) +
  labs(
    title = "Treemap of Total Population by Planning Area (in Thousands)",
    fill = "Population (thousands)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 18),
    legend.position = "bottom"
  )

# Bar plot
p2 <- ggplot(population_age_group_top20, aes(x = reorder_within(PA, Total_Pop, AgeGroup), y = Total_Pop, fill = AgeGroup)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ AgeGroup, scales = "free") +
  scale_x_reordered() +
  coord_flip() +
  labs(
    title = "Top 20 Planning Areas by Age Group Population",
    x = "Planning Area",
    y = "Total Population"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(face = "bold", size = 16),
    axis.text.y = element_text(size = 10),
    plot.title = element_text(face = "bold", size = 18)
  )

# combine both plots
p1 / p2 + plot_layout(heights = c(1, 2))
```



## The code

::: {style="font-size: 0.8em"}


```{r fig.width=16, fig.height=18}
#| eval: false
# Treemap plot
p1 <- ggplot(planning_area_population, aes(area = Pop_thousands, label = PA, fill = Pop_thousands)) +
  geom_treemap() +
  geom_treemap_text(
    colour = "black",
    place = "centre",
    reflow = TRUE,
    size = 12
  ) +
  scale_fill_viridis_c(option = "D", labels = scales::comma_format(suffix = "k")) +
  labs(
    title = "Treemap of Total Population by Planning Area (in Thousands)",
    fill = "Population (thousands)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 18),
    legend.position = "bottom"
  )

# Bar plot
p2 <- ggplot(population_age_group_top20, aes(x = reorder_within(PA, Total_Pop, AgeGroup), y = Total_Pop, fill = AgeGroup)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ AgeGroup, scales = "free") +
  scale_x_reordered() +
  coord_flip() +
  labs(
    title = "Top 20 Planning Areas by Age Group Population",
    x = "Planning Area",
    y = "Total Population"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(face = "bold", size = 16),
    axis.text.y = element_text(size = 10),
    plot.title = element_text(face = "bold", size = 18)
  )

# combine both plots
p1 / p2 + plot_layout(heights = c(1, 2))
```


:::
::::

Insight:

The treemap provides a high-level view of the total population across planning areas, showing that Tampines, Bedok, Sengkang, and Jurong West are the most densely populated regions in Singapore. These areas dominate in population size, occupying larger blocks and warmer color tones.

The bar charts below offer a breakdown by age group, revealing nuanced patterns: Tampines and Sengkang consistently rank high across most age groups, especially for adults and children, suggesting a family-oriented residential profile. In contrast, areas like Bedok have a significantly larger elderly population, while Woodlands stands out in the young adult category.

The variation across age groups highlights the differing demographic compositions of planning areas, which can inform planning for schools, eldercare, housing, and transportation needs.

## 3.3 Visuallisation 3 - Boxplot of Age Distribution by Planning Area



```{r fig.height=12, fig.width=8}
# Order planning areas by median age for better readability
ordered_area <- age_distribution %>%
  group_by(PA) %>%
  summarise(median_age = median(Age)) %>%
  arrange(median_age) %>%
  pull(PA)

# Convert PA into factor with specified order
age_distribution <- age_distribution %>%
  mutate(PA = factor(PA, levels = ordered_area))

# Boxplot
ggplot(age_distribution, aes(x = Age, y = PA)) +
  geom_boxplot(fill = "skyblue", color = "grey30", outlier.size = 0.5) +
  labs(
    title = "Age Distribution by Planning Area (June 2024)",
    x = "Age",
    y = "Planning Area"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14)
  )
```

